
c:/Users/evanh/OneDrive/Desktop/CTD/InternetOfThings/Lab13/target/3.0.0/argon/Lab13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003454  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7470  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e550  000d7474  0001e550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000234  2003e5bc  2003e5bc  0002e5bc  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d74e0  000d74e0  000274e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7508  000d7508  00027508  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001c9e85  00000000  00000000  0002750c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001a2d4  00000000  00000000  001f1391  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003b2d8  00000000  00000000  0020b665  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002cd0  00000000  00000000  0024693d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00009340  00000000  00000000  0024960d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003ecbf  00000000  00000000  0025294d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00046b39  00000000  00000000  0029160c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012830a  00000000  00000000  002d8145  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00008064  00000000  00000000  00400450  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fb43 	bl	d66b8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fb4b 	bl	d66d4 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e550 	.word	0x2003e550
   d4048:	000d7474 	.word	0x000d7474
   d404c:	2003e5bc 	.word	0x2003e5bc
   d4050:	2003e5bc 	.word	0x2003e5bc
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 ff37 	bl	d5ed0 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d7444 	.word	0x000d7444
   d407c:	000d7468 	.word	0x000d7468

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b86a 	b.w	d4158 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f89f 	bl	d41c8 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 bee1 	b.w	d5e54 <_post_loop>

000d4092 <_Znaj>:
   d4092:	f001 bca9 	b.w	d59e8 <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f001 bcaf 	b.w	d59f8 <free>
	...

000d409c <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d409c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d409e:	4a03      	ldr	r2, [pc, #12]	; (d40ac <__cxa_pure_virtual+0x10>)
   d40a0:	2100      	movs	r1, #0
   d40a2:	200c      	movs	r0, #12
   d40a4:	f001 fc04 	bl	d58b0 <panic_>
  while (1);
   d40a8:	e7fe      	b.n	d40a8 <__cxa_pure_virtual+0xc>
   d40aa:	bf00      	nop
   d40ac:	000d5621 	.word	0x000d5621

000d40b0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b0:	7800      	ldrb	r0, [r0, #0]
   d40b2:	fab0 f080 	clz	r0, r0
   d40b6:	0940      	lsrs	r0, r0, #5
   d40b8:	4770      	bx	lr

000d40ba <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ba:	2301      	movs	r3, #1
   d40bc:	7003      	strb	r3, [r0, #0]
   d40be:	4770      	bx	lr

000d40c0 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40c0:	b510      	push	{r4, lr}
   d40c2:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d40c4:	6800      	ldr	r0, [r0, #0]
   d40c6:	b108      	cbz	r0, d40cc <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40c8:	f001 fc96 	bl	d59f8 <free>
class SystemClass {
   d40cc:	4620      	mov	r0, r4
   d40ce:	bd10      	pop	{r4, pc}

000d40d0 <_Z3isrv>:

OledWingAdafruit display;

volatile int count = 0;

void isr(){
   d40d0:	b538      	push	{r3, r4, r5, lr}
  if (interruptsEnabled){
   d40d2:	4b1d      	ldr	r3, [pc, #116]	; (d4148 <_Z3isrv+0x78>)
   d40d4:	781b      	ldrb	r3, [r3, #0]
   d40d6:	b393      	cbz	r3, d413e <_Z3isrv+0x6e>
    count++;
   d40d8:	4c1c      	ldr	r4, [pc, #112]	; (d414c <_Z3isrv+0x7c>)
    display.clearDisplay();
   d40da:	481d      	ldr	r0, [pc, #116]	; (d4150 <_Z3isrv+0x80>)
    count++;
   d40dc:	6823      	ldr	r3, [r4, #0]
   d40de:	3301      	adds	r3, #1
   d40e0:	6023      	str	r3, [r4, #0]
    display.clearDisplay();
   d40e2:	f000 ff47 	bl	d4f74 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(1);
   d40e6:	481a      	ldr	r0, [pc, #104]	; (d4150 <_Z3isrv+0x80>)
   d40e8:	2101      	movs	r1, #1
   d40ea:	f000 fce8 	bl	d4abe <_ZN12Adafruit_GFX11setTextSizeEh>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   d40ee:	4818      	ldr	r0, [pc, #96]	; (d4150 <_Z3isrv+0x80>)
    display.setTextColor(WHITE);
    display.setCursor(0,0);
    display.print(count);
   d40f0:	6825      	ldr	r5, [r4, #0]
   d40f2:	2300      	movs	r3, #0
   d40f4:	6103      	str	r3, [r0, #16]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d40f6:	2d00      	cmp	r5, #0
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d40f8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d40fc:	6143      	str	r3, [r0, #20]
   d40fe:	da1f      	bge.n	d4140 <_Z3isrv+0x70>
            t = print('-');
   d4100:	212d      	movs	r1, #45	; 0x2d
   d4102:	f001 fded 	bl	d5ce0 <_ZN5Print5printEc>
            val = -n;
   d4106:	4269      	negs	r1, r5
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4108:	220a      	movs	r2, #10
   d410a:	4811      	ldr	r0, [pc, #68]	; (d4150 <_Z3isrv+0x80>)
   d410c:	f001 fe01 	bl	d5d12 <_ZN5Print11printNumberEmh>
    Serial.println(count);
   d4110:	f001 ffe4 	bl	d60dc <_Z16_fetch_usbserialv>
   d4114:	6824      	ldr	r4, [r4, #0]
        if (n < 0 && base == 10) {
   d4116:	2c00      	cmp	r4, #0
   d4118:	4605      	mov	r5, r0
   d411a:	da13      	bge.n	d4144 <_Z3isrv+0x74>
            t = print('-');
   d411c:	212d      	movs	r1, #45	; 0x2d
   d411e:	f001 fddf 	bl	d5ce0 <_ZN5Print5printEc>
            val = -n;
   d4122:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   d4124:	220a      	movs	r2, #10
   d4126:	4628      	mov	r0, r5
   d4128:	f001 fdf3 	bl	d5d12 <_ZN5Print11printNumberEmh>
        n += println();
   d412c:	4628      	mov	r0, r5
   d412e:	f001 fdda 	bl	d5ce6 <_ZN5Print7printlnEv>
    display.display();
   d4132:	4807      	ldr	r0, [pc, #28]	; (d4150 <_Z3isrv+0x80>)
   d4134:	f001 f98a 	bl	d544c <_ZN16Adafruit_SSD13067displayEv>

    interruptOccured = true;
   d4138:	4b06      	ldr	r3, [pc, #24]	; (d4154 <_Z3isrv+0x84>)
   d413a:	2201      	movs	r2, #1
   d413c:	701a      	strb	r2, [r3, #0]
  }
}
   d413e:	bd38      	pop	{r3, r4, r5, pc}
            val = n;
   d4140:	4629      	mov	r1, r5
   d4142:	e7e1      	b.n	d4108 <_Z3isrv+0x38>
   d4144:	4621      	mov	r1, r4
   d4146:	e7ed      	b.n	d4124 <_Z3isrv+0x54>
   d4148:	2003e550 	.word	0x2003e550
   d414c:	2003e5cc 	.word	0x2003e5cc
   d4150:	2003e5d0 	.word	0x2003e5d0
   d4154:	2003e640 	.word	0x2003e640

000d4158 <setup>:
// setup() runs once, when the device is first turned on.
void setup() {
   d4158:	b513      	push	{r0, r1, r4, lr}
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600);
   d415a:	f001 ffbf 	bl	d60dc <_Z16_fetch_usbserialv>
   d415e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4162:	f001 ffaf 	bl	d60c4 <_ZN9USBSerial5beginEl>
  pinMode(D6, INPUT); //green
   d4166:	2100      	movs	r1, #0
   d4168:	2006      	movs	r0, #6
   d416a:	f002 fa0f 	bl	d658c <pinMode>
  pinMode(D7, INPUT_PULLUP); //yellow
  interrupts();

  attachInterrupt(D6, isr, FALLING); // D6 will now generate an interrupt on the falling edge and will run the code in the isr
   d416e:	2400      	movs	r4, #0
  pinMode(D7, INPUT_PULLUP); //yellow
   d4170:	2102      	movs	r1, #2
   d4172:	2007      	movs	r0, #7
   d4174:	f002 fa0a 	bl	d658c <pinMode>
  interrupts();
   d4178:	f002 f806 	bl	d6188 <_Z10interruptsv>
  attachInterrupt(D6, isr, FALLING); // D6 will now generate an interrupt on the falling edge and will run the code in the isr
   d417c:	f04f 33ff 	mov.w	r3, #4294967295
   d4180:	2202      	movs	r2, #2
   d4182:	490e      	ldr	r1, [pc, #56]	; (d41bc <setup+0x64>)
   d4184:	9400      	str	r4, [sp, #0]
   d4186:	2006      	movs	r0, #6
   d4188:	f001 ffd4 	bl	d6134 <_Z15attachInterrupttPFvvE13InterruptModeah>
  
  display.setup();
   d418c:	480c      	ldr	r0, [pc, #48]	; (d41c0 <setup+0x68>)
   d418e:	f000 fce5 	bl	d4b5c <_ZN16OledWingAdafruit5setupEv>
  display.clearDisplay();
   d4192:	480b      	ldr	r0, [pc, #44]	; (d41c0 <setup+0x68>)
   d4194:	f000 feee 	bl	d4f74 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();  // cause the display to be updated
   d4198:	4809      	ldr	r0, [pc, #36]	; (d41c0 <setup+0x68>)
   d419a:	f001 f957 	bl	d544c <_ZN16Adafruit_SSD13067displayEv>
  display.setTextSize(1);
   d419e:	4808      	ldr	r0, [pc, #32]	; (d41c0 <setup+0x68>)
   d41a0:	2101      	movs	r1, #1
   d41a2:	f000 fc8c 	bl	d4abe <_ZN12Adafruit_GFX11setTextSizeEh>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   d41a6:	4806      	ldr	r0, [pc, #24]	; (d41c0 <setup+0x68>)
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.println("Hi");
   d41a8:	4906      	ldr	r1, [pc, #24]	; (d41c4 <setup+0x6c>)
   d41aa:	6104      	str	r4, [r0, #16]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d41ac:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d41b0:	6143      	str	r3, [r0, #20]

}
   d41b2:	b002      	add	sp, #8
   d41b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.println("Hi");
   d41b8:	f001 bda1 	b.w	d5cfe <_ZN5Print7printlnEPKc>
   d41bc:	000d40d1 	.word	0x000d40d1
   d41c0:	2003e5d0 	.word	0x2003e5d0
   d41c4:	000d6750 	.word	0x000d6750

000d41c8 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d41c8:	b510      	push	{r4, lr}
  display.loop();
  // The core of your code will likely live here.
  if (interruptOccured){
   d41ca:	4c13      	ldr	r4, [pc, #76]	; (d4218 <loop+0x50>)
  display.loop();
   d41cc:	4813      	ldr	r0, [pc, #76]	; (d421c <loop+0x54>)
   d41ce:	f000 fcee 	bl	d4bae <_ZN16OledWingAdafruit4loopEv>
  if (interruptOccured){
   d41d2:	7823      	ldrb	r3, [r4, #0]
   d41d4:	b133      	cbz	r3, d41e4 <loop+0x1c>
    Serial.println("Interrupt occured");
   d41d6:	f001 ff81 	bl	d60dc <_Z16_fetch_usbserialv>
   d41da:	4911      	ldr	r1, [pc, #68]	; (d4220 <loop+0x58>)
   d41dc:	f001 fd8f 	bl	d5cfe <_ZN5Print7printlnEPKc>
    interruptOccured = false;
   d41e0:	2300      	movs	r3, #0
   d41e2:	7023      	strb	r3, [r4, #0]
  }

  if (digitalRead(D7) == LOW){
   d41e4:	2007      	movs	r0, #7
   d41e6:	f002 f9fb 	bl	d65e0 <digitalRead>
   d41ea:	b998      	cbnz	r0, d4214 <loop+0x4c>

    if (interruptsEnabled){
   d41ec:	4b0d      	ldr	r3, [pc, #52]	; (d4224 <loop+0x5c>)
   d41ee:	781a      	ldrb	r2, [r3, #0]
   d41f0:	b152      	cbz	r2, d4208 <loop+0x40>
      interruptsEnabled = false;
   d41f2:	7018      	strb	r0, [r3, #0]
      Serial.println("Interruptions disabled");
   d41f4:	f001 ff72 	bl	d60dc <_Z16_fetch_usbserialv>
   d41f8:	490b      	ldr	r1, [pc, #44]	; (d4228 <loop+0x60>)
    }
    else{
      interruptsEnabled = true;
      Serial.println("Interruptions enabled");
   d41fa:	f001 fd80 	bl	d5cfe <_ZN5Print7printlnEPKc>
    }

    delay(200);
  }

   d41fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(200);
   d4202:	20c8      	movs	r0, #200	; 0xc8
   d4204:	f001 bdec 	b.w	d5de0 <delay>
      interruptsEnabled = true;
   d4208:	2201      	movs	r2, #1
   d420a:	701a      	strb	r2, [r3, #0]
      Serial.println("Interruptions enabled");
   d420c:	f001 ff66 	bl	d60dc <_Z16_fetch_usbserialv>
   d4210:	4906      	ldr	r1, [pc, #24]	; (d422c <loop+0x64>)
   d4212:	e7f2      	b.n	d41fa <loop+0x32>
   d4214:	bd10      	pop	{r4, pc}
   d4216:	bf00      	nop
   d4218:	2003e640 	.word	0x2003e640
   d421c:	2003e5d0 	.word	0x2003e5d0
   d4220:	000d6753 	.word	0x000d6753
   d4224:	2003e550 	.word	0x2003e550
   d4228:	000d6765 	.word	0x000d6765
   d422c:	000d677c 	.word	0x000d677c

000d4230 <_GLOBAL__sub_I_SystemMode>:
   d4230:	b538      	push	{r3, r4, r5, lr}
              error_(SYSTEM_ERROR_NONE) {
   d4232:	4c0f      	ldr	r4, [pc, #60]	; (d4270 <_GLOBAL__sub_I_SystemMode+0x40>)
    SleepResult() {}
   d4234:	4b0f      	ldr	r3, [pc, #60]	; (d4274 <_GLOBAL__sub_I_SystemMode+0x44>)
   d4236:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4238:	2500      	movs	r5, #0
   d423a:	6025      	str	r5, [r4, #0]
   d423c:	80a5      	strh	r5, [r4, #4]
    SleepResult() {}
   d423e:	71a5      	strb	r5, [r4, #6]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4240:	2003      	movs	r0, #3
   d4242:	f001 fb3d 	bl	d58c0 <set_system_mode>
SYSTEM_MODE(MANUAL);
   d4246:	4a0c      	ldr	r2, [pc, #48]	; (d4278 <_GLOBAL__sub_I_SystemMode+0x48>)
   d4248:	490c      	ldr	r1, [pc, #48]	; (d427c <_GLOBAL__sub_I_SystemMode+0x4c>)
   d424a:	4620      	mov	r0, r4
OledWingAdafruit display;
   d424c:	4c0c      	ldr	r4, [pc, #48]	; (d4280 <_GLOBAL__sub_I_SystemMode+0x50>)
SYSTEM_MODE(MANUAL);
   d424e:	f002 fa1b 	bl	d6688 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
   d4252:	4629      	mov	r1, r5
   d4254:	2001      	movs	r0, #1
   d4256:	f001 fb43 	bl	d58e0 <system_thread_set_state>
OledWingAdafruit display;
   d425a:	2107      	movs	r1, #7
   d425c:	4620      	mov	r0, r4
   d425e:	f000 fc4f 	bl	d4b00 <_ZN16OledWingAdafruitC1Ei>
   d4262:	4620      	mov	r0, r4
   d4264:	4a04      	ldr	r2, [pc, #16]	; (d4278 <_GLOBAL__sub_I_SystemMode+0x48>)
   d4266:	4907      	ldr	r1, [pc, #28]	; (d4284 <_GLOBAL__sub_I_SystemMode+0x54>)
   d4268:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
OledWingAdafruit display;
   d426c:	f002 ba0c 	b.w	d6688 <__aeabi_atexit>
   d4270:	2003e5c0 	.word	0x2003e5c0
   d4274:	ffff0000 	.word	0xffff0000
   d4278:	2003e5bc 	.word	0x2003e5bc
   d427c:	000d40c1 	.word	0x000d40c1
   d4280:	2003e5d0 	.word	0x2003e5d0
   d4284:	000d4acd 	.word	0x000d4acd

000d4288 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d4288:	4770      	bx	lr

000d428a <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d428a:	b510      	push	{r4, lr}
  }
   d428c:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d428e:	4604      	mov	r4, r0
  }
   d4290:	f002 f9ff 	bl	d6692 <_ZdlPvj>
   d4294:	4620      	mov	r0, r4
   d4296:	bd10      	pop	{r4, pc}

000d4298 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4298:	b40e      	push	{r1, r2, r3}
   d429a:	b503      	push	{r0, r1, lr}
   d429c:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   d429e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d42a0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d42a4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d42a6:	f001 fd52 	bl	d5d4e <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   d42aa:	b002      	add	sp, #8
   d42ac:	f85d eb04 	ldr.w	lr, [sp], #4
   d42b0:	b003      	add	sp, #12
   d42b2:	4770      	bx	lr

000d42b4 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d42b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d42b6:	4604      	mov	r4, r0
   d42b8:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d42ba:	7922      	ldrb	r2, [r4, #4]
   d42bc:	68a3      	ldr	r3, [r4, #8]
   d42be:	b132      	cbz	r2, d42ce <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d42c0:	b9a3      	cbnz	r3, d42ec <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d42c2:	490b      	ldr	r1, [pc, #44]	; (d42f0 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d42c4:	b002      	add	sp, #8
   d42c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d42ca:	f001 bd05 	b.w	d5cd8 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d42ce:	4a09      	ldr	r2, [pc, #36]	; (d42f4 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d42d0:	7b26      	ldrb	r6, [r4, #12]
   d42d2:	4d09      	ldr	r5, [pc, #36]	; (d42f8 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d42d4:	4909      	ldr	r1, [pc, #36]	; (d42fc <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d42d6:	7b64      	ldrb	r4, [r4, #13]
   d42d8:	2e01      	cmp	r6, #1
   d42da:	bf18      	it	ne
   d42dc:	4629      	movne	r1, r5
   d42de:	e9cd 1400 	strd	r1, r4, [sp]
   d42e2:	4907      	ldr	r1, [pc, #28]	; (d4300 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d42e4:	f7ff ffd8 	bl	d4298 <_ZN5Print6printfEPKcz>
  }
   d42e8:	b002      	add	sp, #8
   d42ea:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d42ec:	4a05      	ldr	r2, [pc, #20]	; (d4304 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d42ee:	e7ef      	b.n	d42d0 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d42f0:	000d67a3 	.word	0x000d67a3
   d42f4:	000d679a 	.word	0x000d679a
   d42f8:	000d679f 	.word	0x000d679f
   d42fc:	000d679b 	.word	0x000d679b
   d4300:	000d67b9 	.word	0x000d67b9
   d4304:	000d6792 	.word	0x000d6792

000d4308 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d4308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d430c:	b085      	sub	sp, #20
   d430e:	461f      	mov	r7, r3
   d4310:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d4314:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d4318:	eba8 0902 	sub.w	r9, r8, r2
   d431c:	eba7 0a01 	sub.w	sl, r7, r1
   d4320:	f1b9 0f00 	cmp.w	r9, #0
   d4324:	bfb8      	it	lt
   d4326:	f1c9 0900 	rsblt	r9, r9, #0
   d432a:	f1ba 0f00 	cmp.w	sl, #0
   d432e:	bfb8      	it	lt
   d4330:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   d4334:	45d1      	cmp	r9, sl
        uint16_t color) {
   d4336:	4683      	mov	fp, r0
   d4338:	460c      	mov	r4, r1
   d433a:	4615      	mov	r5, r2
    if (steep) {
   d433c:	dd04      	ble.n	d4348 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d433e:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   d4340:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   d4342:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   d4344:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   d4346:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   d4348:	42bc      	cmp	r4, r7
   d434a:	dd05      	ble.n	d4358 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d434c:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   d434e:	4645      	mov	r5, r8
   d4350:	4690      	mov	r8, r2
    if (x0 > x1) {
   d4352:	4622      	mov	r2, r4
   d4354:	463c      	mov	r4, r7
   d4356:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d4358:	1b3e      	subs	r6, r7, r4
   d435a:	b2b2      	uxth	r2, r6
   d435c:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   d435e:	eba8 0205 	sub.w	r2, r8, r5
   d4362:	2a00      	cmp	r2, #0
   d4364:	bfb8      	it	lt
   d4366:	4252      	neglt	r2, r2
   d4368:	9201      	str	r2, [sp, #4]

    int16_t err = dx / 2;
   d436a:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d436e:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d4372:	4545      	cmp	r5, r8
   d4374:	bfb4      	ite	lt
   d4376:	2201      	movlt	r2, #1
   d4378:	f04f 32ff 	movge.w	r2, #4294967295
    int16_t err = dx / 2;
   d437c:	1076      	asrs	r6, r6, #1
        ystep = -1;
   d437e:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   d4380:	42bc      	cmp	r4, r7
   d4382:	dc1c      	bgt.n	d43be <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
        if (steep) {
   d4384:	f8db 2000 	ldr.w	r2, [fp]
            writePixel(y0, x0, color);
   d4388:	9303      	str	r3, [sp, #12]
        if (steep) {
   d438a:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   d438c:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d4390:	bfc7      	ittee	gt
   d4392:	4629      	movgt	r1, r5
   d4394:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   d4396:	462a      	movle	r2, r5
   d4398:	4621      	movle	r1, r4
   d439a:	4658      	mov	r0, fp
   d439c:	47c0      	blx	r8
        }
        err -= dy;
   d439e:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   d43a0:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   d43a2:	1ab6      	subs	r6, r6, r2
   d43a4:	b2b1      	uxth	r1, r6
   d43a6:	b236      	sxth	r6, r6
        if (err < 0) {
   d43a8:	2e00      	cmp	r6, #0
   d43aa:	da05      	bge.n	d43b8 <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
            y0 += ystep;
   d43ac:	9a02      	ldr	r2, [sp, #8]
   d43ae:	4415      	add	r5, r2
            err += dx;
   d43b0:	9a00      	ldr	r2, [sp, #0]
   d43b2:	1856      	adds	r6, r2, r1
            y0 += ystep;
   d43b4:	b22d      	sxth	r5, r5
            err += dx;
   d43b6:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   d43b8:	3401      	adds	r4, #1
   d43ba:	b224      	sxth	r4, r4
   d43bc:	e7e0      	b.n	d4380 <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
        }
    }
}
   d43be:	b005      	add	sp, #20
   d43c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d43c4 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   d43c4:	4770      	bx	lr

000d43c6 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   d43c6:	b410      	push	{r4}
    drawPixel(x, y, color);
   d43c8:	6804      	ldr	r4, [r0, #0]
   d43ca:	6924      	ldr	r4, [r4, #16]
   d43cc:	46a4      	mov	ip, r4
}
   d43ce:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   d43d2:	4760      	bx	ip

000d43d4 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d43d4:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d43d6:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   d43d8:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   d43dc:	9502      	str	r5, [sp, #8]
   d43de:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d43e0:	46a4      	mov	ip, r4
}
   d43e2:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   d43e4:	4760      	bx	ip

000d43e6 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d43e6:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d43e8:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   d43ea:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   d43ee:	9502      	str	r5, [sp, #8]
   d43f0:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d43f2:	46a4      	mov	ip, r4
}
   d43f4:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   d43f6:	4760      	bx	ip

000d43f8 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d43f8:	b470      	push	{r4, r5, r6}
   d43fa:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d43fe:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d4402:	6804      	ldr	r4, [r0, #0]
   d4404:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d4408:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d440a:	46a4      	mov	ip, r4
}
   d440c:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   d440e:	4760      	bx	ip

000d4410 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4410:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4414:	461c      	mov	r4, r3
    startWrite();
   d4416:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   d4418:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d441c:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   d441e:	4605      	mov	r5, r0
   d4420:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   d4422:	3c01      	subs	r4, #1
   d4424:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   d4426:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   d4428:	b224      	sxth	r4, r4
    startWrite();
   d442a:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   d442c:	682b      	ldr	r3, [r5, #0]
   d442e:	f8cd 8004 	str.w	r8, [sp, #4]
   d4432:	9400      	str	r4, [sp, #0]
   d4434:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d4436:	4628      	mov	r0, r5
   d4438:	463b      	mov	r3, r7
   d443a:	4632      	mov	r2, r6
   d443c:	4639      	mov	r1, r7
   d443e:	47a0      	blx	r4
    endWrite();
   d4440:	682b      	ldr	r3, [r5, #0]
   d4442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4444:	4628      	mov	r0, r5
}
   d4446:	b002      	add	sp, #8
   d4448:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d444c:	4718      	bx	r3

000d444e <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d444e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4452:	461d      	mov	r5, r3
    startWrite();
   d4454:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   d4456:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d445a:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   d445c:	4604      	mov	r4, r0
   d445e:	4617      	mov	r7, r2
   d4460:	460e      	mov	r6, r1
    startWrite();
   d4462:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   d4464:	e9cd 7800 	strd	r7, r8, [sp]
   d4468:	6822      	ldr	r2, [r4, #0]
   d446a:	1e6b      	subs	r3, r5, #1
   d446c:	4433      	add	r3, r6
   d446e:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d4470:	4620      	mov	r0, r4
   d4472:	b21b      	sxth	r3, r3
   d4474:	463a      	mov	r2, r7
   d4476:	4631      	mov	r1, r6
   d4478:	47a8      	blx	r5
    endWrite();
   d447a:	6823      	ldr	r3, [r4, #0]
   d447c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d447e:	4620      	mov	r0, r4
}
   d4480:	b002      	add	sp, #8
   d4482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d4486:	4718      	bx	r3

000d4488 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4488:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d448c:	461e      	mov	r6, r3
    startWrite();
   d448e:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d4490:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   d4494:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d4496:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d449a:	460c      	mov	r4, r1
   d449c:	4605      	mov	r5, r0
   d449e:	4617      	mov	r7, r2
    startWrite();
   d44a0:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   d44a2:	4426      	add	r6, r4
   d44a4:	42b4      	cmp	r4, r6
   d44a6:	682b      	ldr	r3, [r5, #0]
   d44a8:	da0b      	bge.n	d44c2 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   d44aa:	f8cd 8000 	str.w	r8, [sp]
   d44ae:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d44b2:	4621      	mov	r1, r4
   d44b4:	464b      	mov	r3, r9
   d44b6:	463a      	mov	r2, r7
   d44b8:	4628      	mov	r0, r5
   d44ba:	3401      	adds	r4, #1
   d44bc:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   d44be:	b224      	sxth	r4, r4
   d44c0:	e7f0      	b.n	d44a4 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   d44c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d44c4:	4628      	mov	r0, r5
}
   d44c6:	b002      	add	sp, #8
   d44c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d44cc:	4718      	bx	r3

000d44ce <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d44ce:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   d44d0:	6802      	ldr	r2, [r0, #0]
   d44d2:	9101      	str	r1, [sp, #4]
   d44d4:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d44d8:	9100      	str	r1, [sp, #0]
   d44da:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d44dc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d44e0:	2200      	movs	r2, #0
   d44e2:	4611      	mov	r1, r2
   d44e4:	47a0      	blx	r4
}
   d44e6:	b002      	add	sp, #8
   d44e8:	bd10      	pop	{r4, pc}

000d44ea <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d44ea:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d44ee:	461d      	mov	r5, r3
    startWrite();
   d44f0:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d44f2:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   d44f6:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d44f8:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d44fc:	4604      	mov	r4, r0
   d44fe:	460f      	mov	r7, r1
   d4500:	4616      	mov	r6, r2
    startWrite();
   d4502:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   d4504:	6823      	ldr	r3, [r4, #0]
   d4506:	f8cd 8000 	str.w	r8, [sp]
   d450a:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d450e:	4632      	mov	r2, r6
   d4510:	462b      	mov	r3, r5
   d4512:	4639      	mov	r1, r7
   d4514:	4620      	mov	r0, r4
   d4516:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   d4518:	6823      	ldr	r3, [r4, #0]
   d451a:	f8cd 8000 	str.w	r8, [sp]
   d451e:	f109 32ff 	add.w	r2, r9, #4294967295
   d4522:	4432      	add	r2, r6
   d4524:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d4528:	4639      	mov	r1, r7
   d452a:	462b      	mov	r3, r5
   d452c:	4620      	mov	r0, r4
   d452e:	b212      	sxth	r2, r2
   d4530:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   d4532:	6823      	ldr	r3, [r4, #0]
   d4534:	f8cd 8000 	str.w	r8, [sp]
   d4538:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d453c:	4632      	mov	r2, r6
   d453e:	464b      	mov	r3, r9
   d4540:	4639      	mov	r1, r7
   d4542:	4620      	mov	r0, r4
   d4544:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   d4546:	1e6b      	subs	r3, r5, #1
   d4548:	19d9      	adds	r1, r3, r7
   d454a:	6823      	ldr	r3, [r4, #0]
   d454c:	f8cd 8000 	str.w	r8, [sp]
   d4550:	6a1d      	ldr	r5, [r3, #32]
   d4552:	4620      	mov	r0, r4
   d4554:	464b      	mov	r3, r9
   d4556:	4632      	mov	r2, r6
   d4558:	b209      	sxth	r1, r1
   d455a:	47a8      	blx	r5
    endWrite();
   d455c:	6823      	ldr	r3, [r4, #0]
   d455e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4560:	4620      	mov	r0, r4
}
   d4562:	b002      	add	sp, #8
   d4564:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d4568:	4718      	bx	r3

000d456a <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   d456a:	4770      	bx	lr

000d456c <_ZN12Adafruit_GFX8drawLineEsssst>:
        uint16_t color) {
   d456c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
   d4570:	4299      	cmp	r1, r3
        uint16_t color) {
   d4572:	4616      	mov	r6, r2
   d4574:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d4578:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d457c:	6802      	ldr	r2, [r0, #0]
   d457e:	4680      	mov	r8, r0
   d4580:	460d      	mov	r5, r1
   d4582:	461c      	mov	r4, r3
    if(x0 == x1){
   d4584:	d113      	bne.n	d45ae <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   d4586:	42be      	cmp	r6, r7
   d4588:	bfc8      	it	gt
   d458a:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d458c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   d4590:	bfc4      	itt	gt
   d4592:	463e      	movgt	r6, r7
   d4594:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d4596:	1c7b      	adds	r3, r7, #1
   d4598:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d459a:	1b9b      	subs	r3, r3, r6
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d459c:	b21b      	sxth	r3, r3
   d459e:	4632      	mov	r2, r6
   d45a0:	4629      	mov	r1, r5
   d45a2:	4640      	mov	r0, r8
   d45a4:	46a4      	mov	ip, r4
}
   d45a6:	b003      	add	sp, #12
   d45a8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d45ac:	4760      	bx	ip
    } else if(y0 == y1){
   d45ae:	42be      	cmp	r6, r7
   d45b0:	d10a      	bne.n	d45c8 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   d45b2:	4299      	cmp	r1, r3
   d45b4:	bfc2      	ittt	gt
   d45b6:	460b      	movgt	r3, r1
   d45b8:	4625      	movgt	r5, r4
   d45ba:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d45bc:	1c63      	adds	r3, r4, #1
   d45be:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d45c2:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d45c4:	1b5b      	subs	r3, r3, r5
   d45c6:	e7e9      	b.n	d459c <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   d45c8:	6953      	ldr	r3, [r2, #20]
   d45ca:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   d45cc:	e9cd 7900 	strd	r7, r9, [sp]
   d45d0:	f8d8 3000 	ldr.w	r3, [r8]
   d45d4:	4640      	mov	r0, r8
   d45d6:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d45d8:	4632      	mov	r2, r6
   d45da:	4623      	mov	r3, r4
   d45dc:	4629      	mov	r1, r5
   d45de:	47b8      	blx	r7
        endWrite();
   d45e0:	f8d8 3000 	ldr.w	r3, [r8]
   d45e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d45e6:	4640      	mov	r0, r8
}
   d45e8:	b003      	add	sp, #12
   d45ea:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   d45ee:	4718      	bx	r3

000d45f0 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   d45f0:	f001 0303 	and.w	r3, r1, #3
   d45f4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d45f8:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   d45fa:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   d45fc:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d4600:	bf59      	ittee	pl
   d4602:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   d4604:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   d4606:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   d4608:	81c3      	strhmi	r3, [r0, #14]
}
   d460a:	4770      	bx	lr

000d460c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d460c:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   d460e:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   d4610:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   d4612:	4a07      	ldr	r2, [pc, #28]	; (d4630 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   d4614:	4d07      	ldr	r5, [pc, #28]	; (d4634 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d4616:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   d4618:	2400      	movs	r4, #0
    _width    = WIDTH;
   d461a:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   d461c:	f04f 31ff 	mov.w	r1, #4294967295
   d4620:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d4624:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   d4626:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   d4628:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   d462a:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   d462c:	6204      	str	r4, [r0, #32]
}
   d462e:	bd30      	pop	{r4, r5, pc}
   d4630:	01000101 	.word	0x01000101
   d4634:	000d6ce0 	.word	0x000d6ce0

000d4638 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d4638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d463c:	b089      	sub	sp, #36	; 0x24
   d463e:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   d4642:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d4644:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d4648:	9304      	str	r3, [sp, #16]
   d464a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   d464e:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d4650:	9305      	str	r3, [sp, #20]
   d4652:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d4656:	4604      	mov	r4, r0
    startWrite();
   d4658:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d465a:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   d465e:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d4662:	bf48      	it	mi
   d4664:	f108 020e 	addmi.w	r2, r8, #14
   d4668:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   d466c:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   d466e:	4635      	mov	r5, r6
   d4670:	9b03      	ldr	r3, [sp, #12]
   d4672:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   d4674:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d4678:	189a      	adds	r2, r3, r2
   d467a:	9b05      	ldr	r3, [sp, #20]
   d467c:	428b      	cmp	r3, r1
   d467e:	b212      	sxth	r2, r2
   d4680:	dd27      	ble.n	d46d2 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d4682:	9b04      	ldr	r3, [sp, #16]
   d4684:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   d4686:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d468a:	9306      	str	r3, [sp, #24]
   d468c:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   d4690:	4580      	cmp	r8, r0
   d4692:	fa1f f189 	uxth.w	r1, r9
   d4696:	dd17      	ble.n	d46c8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   d4698:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d469a:	bf05      	ittet	eq
   d469c:	9b06      	ldreq	r3, [sp, #24]
   d469e:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   d46a0:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d46a2:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   d46a4:	bf18      	it	ne
   d46a6:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   d46a8:	062b      	lsls	r3, r5, #24
   d46aa:	d50a      	bpl.n	d46c2 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   d46ac:	9b02      	ldr	r3, [sp, #8]
   d46ae:	6820      	ldr	r0, [r4, #0]
   d46b0:	9207      	str	r2, [sp, #28]
   d46b2:	4419      	add	r1, r3
   d46b4:	6983      	ldr	r3, [r0, #24]
   d46b6:	b209      	sxth	r1, r1
   d46b8:	461f      	mov	r7, r3
   d46ba:	4620      	mov	r0, r4
   d46bc:	4653      	mov	r3, sl
   d46be:	47b8      	blx	r7
   d46c0:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   d46c2:	f109 0901 	add.w	r9, r9, #1
   d46c6:	e7e1      	b.n	d468c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   d46c8:	9b01      	ldr	r3, [sp, #4]
   d46ca:	3301      	adds	r3, #1
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	445e      	add	r6, fp
   d46d0:	e7ce      	b.n	d4670 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   d46d2:	6823      	ldr	r3, [r4, #0]
   d46d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d46d6:	4620      	mov	r0, r4
}
   d46d8:	b009      	add	sp, #36	; 0x24
   d46da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d46de:	4718      	bx	r3

000d46e0 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d46e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d46e4:	ed2d 8b02 	vpush	{d8}
   d46e8:	b091      	sub	sp, #68	; 0x44
   d46ea:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   d46ec:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d46ee:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   d46f2:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   d46f6:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   d46fa:	9103      	str	r1, [sp, #12]
   d46fc:	461f      	mov	r7, r3
   d46fe:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d4702:	9304      	str	r3, [sp, #16]
   d4704:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   d4706:	2a00      	cmp	r2, #0
   d4708:	f040 80c5 	bne.w	d4896 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   d470c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4710:	428b      	cmp	r3, r1
   d4712:	f340 814c 	ble.w	d49ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   d4716:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d471a:	42b3      	cmp	r3, r6
   d471c:	f340 8147 	ble.w	d49ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d4720:	2306      	movs	r3, #6
   d4722:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   d4726:	2b00      	cmp	r3, #0
   d4728:	f340 8141 	ble.w	d49ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   d472c:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d4730:	2b00      	cmp	r3, #0
   d4732:	f340 813c 	ble.w	d49ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   d4736:	7f03      	ldrb	r3, [r0, #28]
   d4738:	b91b      	cbnz	r3, d4742 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   d473a:	2faf      	cmp	r7, #175	; 0xaf
   d473c:	bf84      	itt	hi
   d473e:	3701      	addhi	r7, #1
   d4740:	b2ff      	uxtbhi	r7, r7
        startWrite();
   d4742:	f8db 3000 	ldr.w	r3, [fp]
   d4746:	4658      	mov	r0, fp
   d4748:	695b      	ldr	r3, [r3, #20]
   d474a:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d474c:	2205      	movs	r2, #5
   d474e:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d4750:	2200      	movs	r2, #0
   d4752:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d4754:	4a98      	ldr	r2, [pc, #608]	; (d49b8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   d4756:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   d475a:	18d3      	adds	r3, r2, r3
   d475c:	930c      	str	r3, [sp, #48]	; 0x30
   d475e:	b2b3      	uxth	r3, r6
   d4760:	9306      	str	r3, [sp, #24]
   d4762:	9a05      	ldr	r2, [sp, #20]
   d4764:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d4766:	5c9b      	ldrb	r3, [r3, r2]
   d4768:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d476a:	b2ab      	uxth	r3, r5
   d476c:	930b      	str	r3, [sp, #44]	; 0x2c
   d476e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d4772:	9308      	str	r3, [sp, #32]
   d4774:	9b03      	ldr	r3, [sp, #12]
   d4776:	fb02 f905 	mul.w	r9, r2, r5
   d477a:	fa19 f983 	uxtah	r9, r9, r3
   d477e:	fa0f f389 	sxth.w	r3, r9
   d4782:	ee08 3a10 	vmov	s16, r3
   d4786:	2308      	movs	r3, #8
   d4788:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   d478a:	9b03      	ldr	r3, [sp, #12]
   d478c:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d4790:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   d4794:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   d4798:	9a07      	ldr	r2, [sp, #28]
   d479a:	f8db 3000 	ldr.w	r3, [fp]
   d479e:	07d2      	lsls	r2, r2, #31
   d47a0:	d552      	bpl.n	d4848 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   d47a2:	2d01      	cmp	r5, #1
   d47a4:	fa1f f289 	uxth.w	r2, r9
   d47a8:	d13e      	bne.n	d4828 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   d47aa:	2c01      	cmp	r4, #1
   d47ac:	d13c      	bne.n	d4828 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   d47ae:	699b      	ldr	r3, [r3, #24]
   d47b0:	9906      	ldr	r1, [sp, #24]
   d47b2:	461f      	mov	r7, r3
   d47b4:	9b04      	ldr	r3, [sp, #16]
   d47b6:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   d47b8:	b212      	sxth	r2, r2
   d47ba:	4651      	mov	r1, sl
   d47bc:	4658      	mov	r0, fp
   d47be:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d47c0:	f109 0301 	add.w	r3, r9, #1
   d47c4:	fa4f f983 	sxtb.w	r9, r3
   d47c8:	9b07      	ldr	r3, [sp, #28]
   d47ca:	085b      	lsrs	r3, r3, #1
   d47cc:	9307      	str	r3, [sp, #28]
   d47ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d47d0:	3b01      	subs	r3, #1
   d47d2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d47d6:	930a      	str	r3, [sp, #40]	; 0x28
   d47d8:	d1de      	bne.n	d4798 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d47da:	9f05      	ldr	r7, [sp, #20]
   d47dc:	3701      	adds	r7, #1
   d47de:	b27b      	sxtb	r3, r7
   d47e0:	9305      	str	r3, [sp, #20]
   d47e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d47e4:	3b01      	subs	r3, #1
   d47e6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d47ea:	9309      	str	r3, [sp, #36]	; 0x24
   d47ec:	d1b9      	bne.n	d4762 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   d47ee:	9b04      	ldr	r3, [sp, #16]
   d47f0:	4543      	cmp	r3, r8
   d47f2:	d00f      	beq.n	d4814 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   d47f4:	2d01      	cmp	r5, #1
   d47f6:	f8db 3000 	ldr.w	r3, [fp]
   d47fa:	d13b      	bne.n	d4874 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d47fc:	2c01      	cmp	r4, #1
   d47fe:	d139      	bne.n	d4874 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d4800:	9908      	ldr	r1, [sp, #32]
   d4802:	f8cd 8000 	str.w	r8, [sp]
   d4806:	3105      	adds	r1, #5
   d4808:	6a1c      	ldr	r4, [r3, #32]
   d480a:	4632      	mov	r2, r6
   d480c:	2308      	movs	r3, #8
   d480e:	b209      	sxth	r1, r1
   d4810:	4658      	mov	r0, fp
   d4812:	47a0      	blx	r4
        endWrite();
   d4814:	f8db 3000 	ldr.w	r3, [fp]
   d4818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d481a:	4658      	mov	r0, fp
}
   d481c:	b011      	add	sp, #68	; 0x44
   d481e:	ecbd 8b02 	vpop	{d8}
   d4822:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   d4826:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   d4828:	9906      	ldr	r1, [sp, #24]
   d482a:	fb14 f202 	smulbb	r2, r4, r2
   d482e:	440a      	add	r2, r1
   d4830:	9904      	ldr	r1, [sp, #16]
   d4832:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d4834:	9400      	str	r4, [sp, #0]
   d4836:	69db      	ldr	r3, [r3, #28]
   d4838:	ee18 1a10 	vmov	r1, s16
   d483c:	461f      	mov	r7, r3
   d483e:	b212      	sxth	r2, r2
   d4840:	462b      	mov	r3, r5
   d4842:	4658      	mov	r0, fp
   d4844:	47b8      	blx	r7
   d4846:	e7bb      	b.n	d47c0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   d4848:	9a04      	ldr	r2, [sp, #16]
   d484a:	4542      	cmp	r2, r8
   d484c:	d0b8      	beq.n	d47c0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   d484e:	2d01      	cmp	r5, #1
   d4850:	fa1f f289 	uxth.w	r2, r9
   d4854:	d107      	bne.n	d4866 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   d4856:	2c01      	cmp	r4, #1
   d4858:	d105      	bne.n	d4866 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   d485a:	699b      	ldr	r3, [r3, #24]
   d485c:	9906      	ldr	r1, [sp, #24]
   d485e:	461f      	mov	r7, r3
   d4860:	440a      	add	r2, r1
   d4862:	4643      	mov	r3, r8
   d4864:	e7a8      	b.n	d47b8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d4866:	9906      	ldr	r1, [sp, #24]
   d4868:	f8cd 8004 	str.w	r8, [sp, #4]
   d486c:	fb14 f202 	smulbb	r2, r4, r2
   d4870:	440a      	add	r2, r1
   d4872:	e7df      	b.n	d4834 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   d4874:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d4876:	f8cd 8004 	str.w	r8, [sp, #4]
   d487a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   d487e:	9a08      	ldr	r2, [sp, #32]
   d4880:	00e4      	lsls	r4, r4, #3
   d4882:	440a      	add	r2, r1
   d4884:	4611      	mov	r1, r2
   d4886:	9400      	str	r4, [sp, #0]
   d4888:	69dc      	ldr	r4, [r3, #28]
   d488a:	4632      	mov	r2, r6
   d488c:	462b      	mov	r3, r5
   d488e:	b209      	sxth	r1, r1
   d4890:	4658      	mov	r0, fp
   d4892:	47a0      	blx	r4
        endWrite();
   d4894:	e7be      	b.n	d4814 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d4896:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   d4898:	6851      	ldr	r1, [r2, #4]
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);
   d489a:	6812      	ldr	r2, [r2, #0]
   d489c:	920d      	str	r2, [sp, #52]	; 0x34
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d489e:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   d48a0:	b2ff      	uxtb	r7, r7
   d48a2:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d48a6:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   d48aa:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d48ac:	789a      	ldrb	r2, [r3, #2]
   d48ae:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   d48b0:	78da      	ldrb	r2, [r3, #3]
   d48b2:	920b      	str	r2, [sp, #44]	; 0x2c
        if(size_x > 1 || size_y > 1) {
   d48b4:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d48b6:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   d48ba:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d48be:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   d48c0:	d801      	bhi.n	d48c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   d48c2:	2c01      	cmp	r4, #1
   d48c4:	d957      	bls.n	d4976 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   d48c6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   d48ca:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   d48cc:	fa0f f38a 	sxth.w	r3, sl
   d48d0:	9307      	str	r3, [sp, #28]
        startWrite();
   d48d2:	f8db 3000 	ldr.w	r3, [fp]
   d48d6:	4658      	mov	r0, fp
   d48d8:	695b      	ldr	r3, [r3, #20]
   d48da:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d48dc:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d48de:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d48e2:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   d48e4:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d48e8:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   d48ea:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   d48ec:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   d48ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d48f0:	429f      	cmp	r7, r3
   d48f2:	d28f      	bcs.n	d4814 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d48f4:	9b07      	ldr	r3, [sp, #28]
   d48f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d48f8:	443b      	add	r3, r7
   d48fa:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   d48fe:	2200      	movs	r2, #0
   d4900:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4902:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4904:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4906:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d490a:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d490e:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4912:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   d4914:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d4916:	9905      	ldr	r1, [sp, #20]
   d4918:	4291      	cmp	r1, r2
   d491a:	d241      	bcs.n	d49a0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   d491c:	1c5a      	adds	r2, r3, #1
   d491e:	b2d2      	uxtb	r2, r2
   d4920:	075b      	lsls	r3, r3, #29
   d4922:	920c      	str	r2, [sp, #48]	; 0x30
   d4924:	d107      	bne.n	d4936 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   d4926:	9b06      	ldr	r3, [sp, #24]
   d4928:	9906      	ldr	r1, [sp, #24]
   d492a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d492c:	3301      	adds	r3, #1
   d492e:	b29b      	uxth	r3, r3
   d4930:	f812 9001 	ldrb.w	r9, [r2, r1]
   d4934:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   d4936:	f019 0f80 	tst.w	r9, #128	; 0x80
   d493a:	d012      	beq.n	d4962 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   d493c:	2d01      	cmp	r5, #1
   d493e:	f8db 3000 	ldr.w	r3, [fp]
   d4942:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d4946:	d11a      	bne.n	d497e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   d4948:	2c01      	cmp	r4, #1
   d494a:	d118      	bne.n	d497e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   d494c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d494e:	699b      	ldr	r3, [r3, #24]
   d4950:	4411      	add	r1, r2
   d4952:	9a05      	ldr	r2, [sp, #20]
   d4954:	4411      	add	r1, r2
   d4956:	461e      	mov	r6, r3
   d4958:	4652      	mov	r2, sl
   d495a:	9b04      	ldr	r3, [sp, #16]
   d495c:	b209      	sxth	r1, r1
   d495e:	4658      	mov	r0, fp
   d4960:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   d4962:	9e05      	ldr	r6, [sp, #20]
   d4964:	3601      	adds	r6, #1
   d4966:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   d4968:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   d496c:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   d496e:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   d4972:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            for(xx=0; xx<w; xx++) {
   d4974:	e7ce      	b.n	d4914 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   d4976:	2300      	movs	r3, #0
   d4978:	e9cd 3307 	strd	r3, r3, [sp, #28]
   d497c:	e7a9      	b.n	d48d2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d497e:	9805      	ldr	r0, [sp, #20]
   d4980:	9a08      	ldr	r2, [sp, #32]
   d4982:	4402      	add	r2, r0
   d4984:	fb02 1105 	mla	r1, r2, r5, r1
   d4988:	9a04      	ldr	r2, [sp, #16]
   d498a:	e9cd 4200 	strd	r4, r2, [sp]
   d498e:	69db      	ldr	r3, [r3, #28]
   d4990:	ee18 2a10 	vmov	r2, s16
   d4994:	461e      	mov	r6, r3
   d4996:	b209      	sxth	r1, r1
   d4998:	462b      	mov	r3, r5
   d499a:	4658      	mov	r0, fp
   d499c:	47b0      	blx	r6
   d499e:	e7e0      	b.n	d4962 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   d49a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   d49a2:	3701      	adds	r7, #1
   d49a4:	4498      	add	r8, r3
   d49a6:	fa5f f888 	uxtb.w	r8, r8
   d49aa:	b2ff      	uxtb	r7, r7
   d49ac:	e79f      	b.n	d48ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   d49ae:	b011      	add	sp, #68	; 0x44
   d49b0:	ecbd 8b02 	vpop	{d8}
   d49b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d49b8:	000d67d6 	.word	0x000d67d6

000d49bc <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d49bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   d49be:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   d49c0:	b085      	sub	sp, #20
   d49c2:	4604      	mov	r4, r0
   d49c4:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   d49c6:	2a00      	cmp	r2, #0
   d49c8:	d134      	bne.n	d4a34 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   d49ca:	290a      	cmp	r1, #10
   d49cc:	d108      	bne.n	d49e0 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   d49ce:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   d49d0:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   d49d2:	7e42      	ldrb	r2, [r0, #25]
   d49d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   d49d8:	8263      	strh	r3, [r4, #18]
}
   d49da:	2001      	movs	r0, #1
   d49dc:	b005      	add	sp, #20
   d49de:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   d49e0:	290d      	cmp	r1, #13
   d49e2:	d0fa      	beq.n	d49da <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   d49e4:	7ee1      	ldrb	r1, [r4, #27]
   d49e6:	7e00      	ldrb	r0, [r0, #24]
   d49e8:	7e65      	ldrb	r5, [r4, #25]
   d49ea:	b171      	cbz	r1, d4a0a <_ZN12Adafruit_GFX5writeEh+0x4e>
   d49ec:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d49f0:	2106      	movs	r1, #6
   d49f2:	fb11 6100 	smlabb	r1, r1, r0, r6
   d49f6:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d49fa:	42b1      	cmp	r1, r6
   d49fc:	bfc1      	itttt	gt
   d49fe:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   d4a02:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   d4a04:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   d4a08:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d4a0a:	8ae2      	ldrh	r2, [r4, #22]
   d4a0c:	9201      	str	r2, [sp, #4]
   d4a0e:	8aa2      	ldrh	r2, [r4, #20]
   d4a10:	9200      	str	r2, [sp, #0]
   d4a12:	e9cd 0502 	strd	r0, r5, [sp, #8]
   d4a16:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d4a1a:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d4a1e:	4620      	mov	r0, r4
   d4a20:	f7ff fe5e 	bl	d46e0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   d4a24:	7e23      	ldrb	r3, [r4, #24]
   d4a26:	8a22      	ldrh	r2, [r4, #16]
   d4a28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d4a2c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d4a30:	8223      	strh	r3, [r4, #16]
   d4a32:	e7d2      	b.n	d49da <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   d4a34:	290a      	cmp	r1, #10
   d4a36:	d107      	bne.n	d4a48 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   d4a38:	2300      	movs	r3, #0
   d4a3a:	8203      	strh	r3, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d4a3c:	7a93      	ldrb	r3, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   d4a3e:	7e41      	ldrb	r1, [r0, #25]
   d4a40:	8a42      	ldrh	r2, [r0, #18]
   d4a42:	fb01 2303 	mla	r3, r1, r3, r2
   d4a46:	e7c7      	b.n	d49d8 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   d4a48:	290d      	cmp	r1, #13
   d4a4a:	d0c6      	beq.n	d49da <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   d4a4c:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d4a4e:	42a9      	cmp	r1, r5
   d4a50:	d3c3      	bcc.n	d49da <_ZN12Adafruit_GFX5writeEh+0x1e>
   d4a52:	7a51      	ldrb	r1, [r2, #9]
   d4a54:	4299      	cmp	r1, r3
   d4a56:	d3c0      	bcc.n	d49da <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   d4a58:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   d4a5a:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   d4a5c:	b2ed      	uxtb	r5, r5
   d4a5e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   d4a62:	78af      	ldrb	r7, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d4a64:	b32f      	cbz	r7, d4ab2 <_ZN12Adafruit_GFX5writeEh+0xf6>
   d4a66:	78e9      	ldrb	r1, [r5, #3]
   d4a68:	b319      	cbz	r1, d4ab2 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   d4a6a:	7ee1      	ldrb	r1, [r4, #27]
   d4a6c:	7e00      	ldrb	r0, [r0, #24]
   d4a6e:	7e66      	ldrb	r6, [r4, #25]
   d4a70:	b191      	cbz	r1, d4a98 <_ZN12Adafruit_GFX5writeEh+0xdc>
   d4a72:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d4a76:	4439      	add	r1, r7
   d4a78:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
   d4a7c:	fb00 7101 	mla	r1, r0, r1, r7
   d4a80:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
   d4a84:	42b9      	cmp	r1, r7
   d4a86:	dd07      	ble.n	d4a98 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   d4a88:	2700      	movs	r7, #0
   d4a8a:	8227      	strh	r7, [r4, #16]
   d4a8c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d4a90:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   d4a92:	fb02 1206 	mla	r2, r2, r6, r1
   d4a96:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d4a98:	8ae2      	ldrh	r2, [r4, #22]
   d4a9a:	9201      	str	r2, [sp, #4]
   d4a9c:	8aa2      	ldrh	r2, [r4, #20]
   d4a9e:	9200      	str	r2, [sp, #0]
   d4aa0:	e9cd 0602 	strd	r0, r6, [sp, #8]
   d4aa4:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d4aa8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d4aac:	4620      	mov	r0, r4
   d4aae:	f7ff fe17 	bl	d46e0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d4ab2:	7929      	ldrb	r1, [r5, #4]
   d4ab4:	7e23      	ldrb	r3, [r4, #24]
   d4ab6:	8a22      	ldrh	r2, [r4, #16]
   d4ab8:	fb01 2303 	mla	r3, r1, r3, r2
   d4abc:	e7b8      	b.n	d4a30 <_ZN12Adafruit_GFX5writeEh+0x74>

000d4abe <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   d4abe:	2901      	cmp	r1, #1
   d4ac0:	bf38      	it	cc
   d4ac2:	2101      	movcc	r1, #1
   d4ac4:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   d4ac6:	7641      	strb	r1, [r0, #25]
}
   d4ac8:	4770      	bx	lr
	...

000d4acc <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   d4acc:	b510      	push	{r4, lr}
   d4ace:	4b06      	ldr	r3, [pc, #24]	; (d4ae8 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   d4ad0:	6003      	str	r3, [r0, #0]
   d4ad2:	4604      	mov	r4, r0
	if (mutex) {
   d4ad4:	6d00      	ldr	r0, [r0, #80]	; 0x50
   d4ad6:	b108      	cbz	r0, d4adc <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   d4ad8:	f000 fdba 	bl	d5650 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   d4adc:	4620      	mov	r0, r4
   d4ade:	f000 f8d1 	bl	d4c84 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   d4ae2:	4620      	mov	r0, r4
   d4ae4:	bd10      	pop	{r4, pc}
   d4ae6:	bf00      	nop
   d4ae8:	000d6d38 	.word	0x000d6d38

000d4aec <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   d4aec:	b510      	push	{r4, lr}
   d4aee:	4604      	mov	r4, r0
}
   d4af0:	f7ff ffec 	bl	d4acc <_ZN16OledWingAdafruitD1Ev>
   d4af4:	4620      	mov	r0, r4
   d4af6:	2170      	movs	r1, #112	; 0x70
   d4af8:	f001 fdcb 	bl	d6692 <_ZdlPvj>
   d4afc:	4620      	mov	r0, r4
   d4afe:	bd10      	pop	{r4, pc}

000d4b00 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   d4b00:	b530      	push	{r4, r5, lr}
   d4b02:	b085      	sub	sp, #20
   d4b04:	4604      	mov	r4, r0
   d4b06:	460d      	mov	r5, r1
   d4b08:	f001 fd96 	bl	d6638 <_Z19__fetch_global_Wirev>
   d4b0c:	4a10      	ldr	r2, [pc, #64]	; (d4b50 <_ZN16OledWingAdafruitC1Ei+0x50>)
   d4b0e:	4911      	ldr	r1, [pc, #68]	; (d4b54 <_ZN16OledWingAdafruitC1Ei+0x54>)
   d4b10:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d4b14:	f04f 32ff 	mov.w	r2, #4294967295
   d4b18:	2180      	movs	r1, #128	; 0x80
   d4b1a:	4603      	mov	r3, r0
   d4b1c:	9200      	str	r2, [sp, #0]
   d4b1e:	4620      	mov	r0, r4
   d4b20:	2220      	movs	r2, #32
   d4b22:	f000 f935 	bl	d4d90 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   d4b26:	4b0c      	ldr	r3, [pc, #48]	; (d4b58 <_ZN16OledWingAdafruitC1Ei+0x58>)
   d4b28:	6023      	str	r3, [r4, #0]
   d4b2a:	2300      	movs	r3, #0
   d4b2c:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   d4b30:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4b34:	f000 f854 	bl	d4be0 <_ZN8DebounceC1Ev>
   d4b38:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4b3c:	f000 f850 	bl	d4be0 <_ZN8DebounceC1Ev>
   d4b40:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4b44:	f000 f84c 	bl	d4be0 <_ZN8DebounceC1Ev>
}
   d4b48:	4620      	mov	r0, r4
   d4b4a:	b005      	add	sp, #20
   d4b4c:	bd30      	pop	{r4, r5, pc}
   d4b4e:	bf00      	nop
   d4b50:	00061a80 	.word	0x00061a80
   d4b54:	000186a0 	.word	0x000186a0
   d4b58:	000d6d38 	.word	0x000d6d38

000d4b5c <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   d4b5c:	b513      	push	{r0, r1, r4, lr}
   d4b5e:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   d4b60:	3050      	adds	r0, #80	; 0x50
   d4b62:	f000 fd6d 	bl	d5640 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   d4b66:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4b68:	07d9      	lsls	r1, r3, #31
   d4b6a:	d505      	bpl.n	d4b78 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   d4b6c:	2202      	movs	r2, #2
   d4b6e:	2104      	movs	r1, #4
   d4b70:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4b74:	f000 f848 	bl	d4c08 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   d4b78:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4b7a:	079a      	lsls	r2, r3, #30
   d4b7c:	d505      	bpl.n	d4b8a <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   d4b7e:	2200      	movs	r2, #0
   d4b80:	2103      	movs	r1, #3
   d4b82:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4b86:	f000 f83f 	bl	d4c08 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   d4b8a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4b8c:	075b      	lsls	r3, r3, #29
   d4b8e:	d505      	bpl.n	d4b9c <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   d4b90:	2202      	movs	r2, #2
   d4b92:	4611      	mov	r1, r2
   d4b94:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4b98:	f000 f836 	bl	d4c08 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d4b9c:	2301      	movs	r3, #1
   d4b9e:	9300      	str	r3, [sp, #0]
   d4ba0:	223c      	movs	r2, #60	; 0x3c
   d4ba2:	2102      	movs	r1, #2
   d4ba4:	4620      	mov	r0, r4
   d4ba6:	f000 f9f3 	bl	d4f90 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   d4baa:	b002      	add	sp, #8
   d4bac:	bd10      	pop	{r4, pc}

000d4bae <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   d4bae:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   d4bb0:	6d43      	ldr	r3, [r0, #84]	; 0x54
   d4bb2:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   d4bb4:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   d4bb6:	d502      	bpl.n	d4bbe <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   d4bb8:	3058      	adds	r0, #88	; 0x58
   d4bba:	f000 f832 	bl	d4c22 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   d4bbe:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4bc0:	079a      	lsls	r2, r3, #30
   d4bc2:	d503      	bpl.n	d4bcc <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   d4bc4:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4bc8:	f000 f82b 	bl	d4c22 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   d4bcc:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4bce:	075b      	lsls	r3, r3, #29
   d4bd0:	d505      	bpl.n	d4bde <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   d4bd2:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   d4bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   d4bda:	f000 b822 	b.w	d4c22 <_ZN8Debounce6updateEv>
}
   d4bde:	bd10      	pop	{r4, pc}

000d4be0 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   d4be0:	2100      	movs	r1, #0
   d4be2:	220a      	movs	r2, #10
   d4be4:	e9c0 1200 	strd	r1, r2, [r0]
{}
   d4be8:	4770      	bx	lr

000d4bea <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   d4bea:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   d4bec:	b510      	push	{r4, lr}
   d4bee:	4604      	mov	r4, r0
    this->pin = pin;
   d4bf0:	71c1      	strb	r1, [r0, #7]
    state = 0;
   d4bf2:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   d4bf4:	b288      	uxth	r0, r1
   d4bf6:	f001 fcf3 	bl	d65e0 <digitalRead>
   d4bfa:	b108      	cbz	r0, d4c00 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   d4bfc:	2303      	movs	r3, #3
   d4bfe:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4c00:	f000 fd16 	bl	d5630 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   d4c04:	6020      	str	r0, [r4, #0]
#endif
}
   d4c06:	bd10      	pop	{r4, pc}

000d4c08 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   d4c08:	b538      	push	{r3, r4, r5, lr}
   d4c0a:	460c      	mov	r4, r1
   d4c0c:	4605      	mov	r5, r0
  pinMode(pin, mode);
   d4c0e:	4611      	mov	r1, r2
   d4c10:	b2a0      	uxth	r0, r4
   d4c12:	f001 fcbb 	bl	d658c <pinMode>
  
  this->attach(pin);
   d4c16:	4621      	mov	r1, r4
   d4c18:	4628      	mov	r0, r5
}
   d4c1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   d4c1e:	f7ff bfe4 	b.w	d4bea <_ZN8Debounce6attachEi>

000d4c22 <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   d4c22:	b538      	push	{r3, r4, r5, lr}
   d4c24:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   d4c26:	79c0      	ldrb	r0, [r0, #7]
   d4c28:	f001 fcda 	bl	d65e0 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   d4c2c:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   d4c2e:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   d4c30:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   d4c34:	bf18      	it	ne
   d4c36:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d4c38:	f3c5 0540 	ubfx	r5, r5, #1, #1
   d4c3c:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   d4c3e:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d4c40:	d00a      	beq.n	d4c58 <_ZN8Debounce6updateEv+0x36>
   d4c42:	f000 fcf5 	bl	d5630 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   d4c46:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   d4c48:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   d4c4a:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   d4c4e:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   d4c50:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   d4c52:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   d4c56:	bd38      	pop	{r3, r4, r5, pc}
   d4c58:	f000 fcea 	bl	d5630 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   d4c5c:	6823      	ldr	r3, [r4, #0]
   d4c5e:	1ac0      	subs	r0, r0, r3
   d4c60:	88a3      	ldrh	r3, [r4, #4]
   d4c62:	4298      	cmp	r0, r3
   d4c64:	d3f4      	bcc.n	d4c50 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   d4c66:	79a3      	ldrb	r3, [r4, #6]
   d4c68:	f003 0301 	and.w	r3, r3, #1
   d4c6c:	42ab      	cmp	r3, r5
   d4c6e:	d0ef      	beq.n	d4c50 <_ZN8Debounce6updateEv+0x2e>
   d4c70:	f000 fcde 	bl	d5630 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   d4c74:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   d4c76:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   d4c78:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   d4c7c:	f043 0308 	orr.w	r3, r3, #8
   d4c80:	e7e5      	b.n	d4c4e <_ZN8Debounce6updateEv+0x2c>
	...

000d4c84 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d4c84:	b510      	push	{r4, lr}
   d4c86:	4b04      	ldr	r3, [pc, #16]	; (d4c98 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   d4c88:	6003      	str	r3, [r0, #0]
   d4c8a:	4604      	mov	r4, r0
  if(buffer) {
   d4c8c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4c8e:	b108      	cbz	r0, d4c94 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   d4c90:	f000 feb2 	bl	d59f8 <free>
    buffer = NULL;
  }
}
   d4c94:	4620      	mov	r0, r4
   d4c96:	bd10      	pop	{r4, pc}
   d4c98:	000d7244 	.word	0x000d7244

000d4c9c <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d4c9c:	b510      	push	{r4, lr}
   d4c9e:	4604      	mov	r4, r0
}
   d4ca0:	f7ff fff0 	bl	d4c84 <_ZN16Adafruit_SSD1306D1Ev>
   d4ca4:	4620      	mov	r0, r4
   d4ca6:	2150      	movs	r1, #80	; 0x50
   d4ca8:	f001 fcf3 	bl	d6692 <_ZdlPvj>
   d4cac:	4620      	mov	r0, r4
   d4cae:	bd10      	pop	{r4, pc}

000d4cb0 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d4cb0:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4cb2:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d4cb4:	db4b      	blt.n	d4d4e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4cb6:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   d4cba:	428c      	cmp	r4, r1
   d4cbc:	dd47      	ble.n	d4d4e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4cbe:	2a00      	cmp	r2, #0
   d4cc0:	db45      	blt.n	d4d4e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4cc2:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   d4cc6:	4294      	cmp	r4, r2
   d4cc8:	dd41      	ble.n	d4d4e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   d4cca:	7e84      	ldrb	r4, [r0, #26]
   d4ccc:	2c02      	cmp	r4, #2
   d4cce:	d01f      	beq.n	d4d10 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   d4cd0:	2c03      	cmp	r4, #3
   d4cd2:	d026      	beq.n	d4d22 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   d4cd4:	2c01      	cmp	r4, #1
   d4cd6:	d104      	bne.n	d4ce2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   d4cd8:	8904      	ldrh	r4, [r0, #8]
   d4cda:	43d2      	mvns	r2, r2
   d4cdc:	4414      	add	r4, r2
      break;
   d4cde:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d4ce0:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   d4ce2:	2b01      	cmp	r3, #1
   d4ce4:	d023      	beq.n	d4d2e <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   d4ce6:	2b02      	cmp	r3, #2
   d4ce8:	d032      	beq.n	d4d50 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   d4cea:	bb83      	cbnz	r3, d4d4e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   d4cec:	2a00      	cmp	r2, #0
   d4cee:	4613      	mov	r3, r2
   d4cf0:	8904      	ldrh	r4, [r0, #8]
   d4cf2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4cf4:	bfb8      	it	lt
   d4cf6:	1dd3      	addlt	r3, r2, #7
   d4cf8:	10db      	asrs	r3, r3, #3
   d4cfa:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4cfe:	f002 0207 	and.w	r2, r2, #7
   d4d02:	2301      	movs	r3, #1
   d4d04:	4093      	lsls	r3, r2
   d4d06:	5c42      	ldrb	r2, [r0, r1]
   d4d08:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d4d0c:	5442      	strb	r2, [r0, r1]
    }
  }
}
   d4d0e:	e01e      	b.n	d4d4e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   d4d10:	8904      	ldrh	r4, [r0, #8]
   d4d12:	43c9      	mvns	r1, r1
   d4d14:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
   d4d16:	8944      	ldrh	r4, [r0, #10]
   d4d18:	43d2      	mvns	r2, r2
   d4d1a:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   d4d1c:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d4d1e:	b212      	sxth	r2, r2
      break;
   d4d20:	e7df      	b.n	d4ce2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   d4d22:	8944      	ldrh	r4, [r0, #10]
   d4d24:	43c9      	mvns	r1, r1
   d4d26:	440c      	add	r4, r1
      break;
   d4d28:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d4d2a:	b222      	sxth	r2, r4
      break;
   d4d2c:	e7d9      	b.n	d4ce2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   d4d2e:	2a00      	cmp	r2, #0
   d4d30:	8904      	ldrh	r4, [r0, #8]
   d4d32:	4613      	mov	r3, r2
   d4d34:	bfb8      	it	lt
   d4d36:	1dd3      	addlt	r3, r2, #7
   d4d38:	10db      	asrs	r3, r3, #3
   d4d3a:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4d3e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d4d40:	f002 0007 	and.w	r0, r2, #7
   d4d44:	2201      	movs	r2, #1
   d4d46:	4082      	lsls	r2, r0
   d4d48:	5c58      	ldrb	r0, [r3, r1]
   d4d4a:	4302      	orrs	r2, r0
   d4d4c:	545a      	strb	r2, [r3, r1]
}
   d4d4e:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d4d50:	2a00      	cmp	r2, #0
   d4d52:	4613      	mov	r3, r2
   d4d54:	8904      	ldrh	r4, [r0, #8]
   d4d56:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4d58:	bfb8      	it	lt
   d4d5a:	1dd3      	addlt	r3, r2, #7
   d4d5c:	10db      	asrs	r3, r3, #3
   d4d5e:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4d62:	f002 0207 	and.w	r2, r2, #7
   d4d66:	2301      	movs	r3, #1
   d4d68:	fa03 f202 	lsl.w	r2, r3, r2
   d4d6c:	5c43      	ldrb	r3, [r0, r1]
   d4d6e:	405a      	eors	r2, r3
   d4d70:	e7cc      	b.n	d4d0c <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>

000d4d72 <_ZN16Adafruit_SSD130610stopscrollEv.part.0>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4d72:	b510      	push	{r4, lr}
   d4d74:	4604      	mov	r4, r0
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
   d4d76:	f990 0036 	ldrsb.w	r0, [r0, #54]	; 0x36
   d4d7a:	2101      	movs	r1, #1
   d4d7c:	b280      	uxth	r0, r0
   d4d7e:	f001 fc16 	bl	d65ae <digitalWrite>
   d4d82:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4d84:	b118      	cbz	r0, d4d8e <_ZN16Adafruit_SSD130610stopscrollEv.part.0+0x1c>
}
   d4d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TRANSACTION_END
   d4d8a:	f000 beac 	b.w	d5ae6 <_ZN8SPIClass14endTransactionEv>
}
   d4d8e:	bd10      	pop	{r4, pc}

000d4d90 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   d4d90:	b570      	push	{r4, r5, r6, lr}
   d4d92:	4604      	mov	r4, r0
   d4d94:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   d4d96:	2600      	movs	r6, #0
   d4d98:	f7ff fc38 	bl	d460c <_ZN12Adafruit_GFXC1Ess>
   d4d9c:	4b11      	ldr	r3, [pc, #68]	; (d4de4 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   d4d9e:	6023      	str	r3, [r4, #0]
   d4da0:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   d4da2:	b915      	cbnz	r5, d4daa <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   d4da4:	f001 fc48 	bl	d6638 <_Z19__fetch_global_Wirev>
   d4da8:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   d4daa:	23ff      	movs	r3, #255	; 0xff
   d4dac:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   d4db0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   d4db4:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   d4db8:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   d4dbc:	4b0a      	ldr	r3, [pc, #40]	; (d4de8 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   d4dbe:	63a3      	str	r3, [r4, #56]	; 0x38
   d4dc0:	2301      	movs	r3, #1
   d4dc2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   d4dc6:	9b05      	ldr	r3, [sp, #20]
   d4dc8:	64a3      	str	r3, [r4, #72]	; 0x48
   d4dca:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4dce:	9b06      	ldr	r3, [sp, #24]
   d4dd0:	86a2      	strh	r2, [r4, #52]	; 0x34
   d4dd2:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   d4dd6:	6426      	str	r6, [r4, #64]	; 0x40
   d4dd8:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   d4ddc:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   d4dde:	4620      	mov	r0, r4
   d4de0:	bd70      	pop	{r4, r5, r6, pc}
   d4de2:	bf00      	nop
   d4de4:	000d7244 	.word	0x000d7244
   d4de8:	000d6d90 	.word	0x000d6d90

000d4dec <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d4dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4dee:	4604      	mov	r4, r0
  if(wire) { // I2C
   d4df0:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d4df2:	460d      	mov	r5, r1
  if(wire) { // I2C
   d4df4:	b190      	cbz	r0, d4e1c <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   d4df6:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4dfa:	f001 fa91 	bl	d6320 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4dfe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4e00:	6803      	ldr	r3, [r0, #0]
   d4e02:	2100      	movs	r1, #0
   d4e04:	689b      	ldr	r3, [r3, #8]
   d4e06:	4798      	blx	r3
    WIRE_WRITE(c);
   d4e08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4e0a:	6803      	ldr	r3, [r0, #0]
   d4e0c:	4629      	mov	r1, r5
   d4e0e:	689b      	ldr	r3, [r3, #8]
   d4e10:	4798      	blx	r3
    wire->endTransmission();
   d4e12:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   d4e14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   d4e18:	f001 ba89 	b.w	d632e <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d4e1c:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d4e20:	4601      	mov	r1, r0
   d4e22:	b298      	uxth	r0, r3
   d4e24:	f001 fbc3 	bl	d65ae <digitalWrite>
  if(spi) {
   d4e28:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4e2a:	b120      	cbz	r0, d4e36 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   d4e2c:	4629      	mov	r1, r5
}
   d4e2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   d4e32:	f000 bedf 	b.w	d5bf4 <_ZN8SPIClass8transferEh>
   d4e36:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4e38:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d4e3a:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d4e3e:	ea05 0107 	and.w	r1, r5, r7
   d4e42:	b280      	uxth	r0, r0
   d4e44:	f001 fbb3 	bl	d65ae <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d4e48:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4e4c:	2101      	movs	r1, #1
   d4e4e:	b280      	uxth	r0, r0
   d4e50:	f001 fbad 	bl	d65ae <digitalWrite>
      digitalWrite(clkPin , LOW);
   d4e54:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4e58:	2100      	movs	r1, #0
   d4e5a:	b280      	uxth	r0, r0
   d4e5c:	f001 fba7 	bl	d65ae <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4e60:	3e01      	subs	r6, #1
   d4e62:	ea4f 0757 	mov.w	r7, r7, lsr #1
   d4e66:	d1e8      	bne.n	d4e3a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   d4e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4e6a <_ZN16Adafruit_SSD130613invertDisplayEb>:
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4e6a:	b538      	push	{r3, r4, r5, lr}
   d4e6c:	4604      	mov	r4, r0
  TRANSACTION_START
   d4e6e:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4e70:	460d      	mov	r5, r1
  TRANSACTION_START
   d4e72:	b180      	cbz	r0, d4e96 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d4e74:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d4e76:	f001 fa45 	bl	d6304 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   d4e7a:	2d00      	cmp	r5, #0
   d4e7c:	4620      	mov	r0, r4
   d4e7e:	bf14      	ite	ne
   d4e80:	21a7      	movne	r1, #167	; 0xa7
   d4e82:	21a6      	moveq	r1, #166	; 0xa6
   d4e84:	f7ff ffb2 	bl	d4dec <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   d4e88:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4e8a:	b188      	cbz	r0, d4eb0 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   d4e8c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d4e8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4e92:	f001 ba37 	b.w	d6304 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   d4e96:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4e98:	b118      	cbz	r0, d4ea2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   d4e9a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d4e9e:	f000 fe3b 	bl	d5b18 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d4ea2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d4ea6:	2100      	movs	r1, #0
   d4ea8:	b280      	uxth	r0, r0
   d4eaa:	f001 fb80 	bl	d65ae <digitalWrite>
   d4eae:	e7e4      	b.n	d4e7a <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
   d4eb0:	4620      	mov	r0, r4
}
   d4eb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4eb6:	f7ff bf5c 	b.w	d4d72 <_ZN16Adafruit_SSD130610stopscrollEv.part.0>

000d4eba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d4eba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4ebe:	4604      	mov	r4, r0
  if(wire) { // I2C
   d4ec0:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d4ec2:	460d      	mov	r5, r1
  if(wire) { // I2C
   d4ec4:	188f      	adds	r7, r1, r2
   d4ec6:	b340      	cbz	r0, d4f1a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   d4ec8:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4ecc:	f001 fa28 	bl	d6320 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4ed0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4ed2:	6803      	ldr	r3, [r0, #0]
   d4ed4:	2100      	movs	r1, #0
   d4ed6:	689b      	ldr	r3, [r3, #8]
   d4ed8:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d4eda:	2601      	movs	r6, #1
    while(n--) {
   d4edc:	42bd      	cmp	r5, r7
   d4ede:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4ee0:	d017      	beq.n	d4f12 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   d4ee2:	2e1f      	cmp	r6, #31
   d4ee4:	d90c      	bls.n	d4f00 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   d4ee6:	f001 fa22 	bl	d632e <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d4eea:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4eee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4ef0:	f001 fa16 	bl	d6320 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4ef4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4ef6:	6803      	ldr	r3, [r0, #0]
   d4ef8:	2100      	movs	r1, #0
   d4efa:	689b      	ldr	r3, [r3, #8]
   d4efc:	4798      	blx	r3
        bytesOut = 1;
   d4efe:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d4f00:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4f02:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4f06:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d4f08:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d4f0a:	689b      	ldr	r3, [r3, #8]
   d4f0c:	4798      	blx	r3
      bytesOut++;
   d4f0e:	b2f6      	uxtb	r6, r6
    while(n--) {
   d4f10:	e7e4      	b.n	d4edc <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   d4f12:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   d4f16:	f001 ba0a 	b.w	d632e <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d4f1a:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d4f1e:	4601      	mov	r1, r0
   d4f20:	b298      	uxth	r0, r3
   d4f22:	f001 fb44 	bl	d65ae <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   d4f26:	42af      	cmp	r7, r5
   d4f28:	d022      	beq.n	d4f70 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   d4f2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   d4f2c:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d4f30:	b118      	cbz	r0, d4f3a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   d4f32:	4649      	mov	r1, r9
   d4f34:	f000 fe5e 	bl	d5bf4 <_ZN8SPIClass8transferEh>
   d4f38:	e7f5      	b.n	d4f26 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   d4f3a:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4f3c:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d4f40:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d4f44:	ea09 0108 	and.w	r1, r9, r8
   d4f48:	b280      	uxth	r0, r0
   d4f4a:	f001 fb30 	bl	d65ae <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d4f4e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4f52:	2101      	movs	r1, #1
   d4f54:	b280      	uxth	r0, r0
   d4f56:	f001 fb2a 	bl	d65ae <digitalWrite>
      digitalWrite(clkPin , LOW);
   d4f5a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4f5e:	2100      	movs	r1, #0
   d4f60:	b280      	uxth	r0, r0
   d4f62:	f001 fb24 	bl	d65ae <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4f66:	3e01      	subs	r6, #1
   d4f68:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d4f6c:	d1e8      	bne.n	d4f40 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   d4f6e:	e7da      	b.n	d4f26 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   d4f70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4f74 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   d4f74:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d4f78:	1dda      	adds	r2, r3, #7
   d4f7a:	bf48      	it	mi
   d4f7c:	f103 020e 	addmi.w	r2, r3, #14
   d4f80:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d4f84:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4f86:	10d2      	asrs	r2, r2, #3
   d4f88:	435a      	muls	r2, r3
   d4f8a:	2100      	movs	r1, #0
   d4f8c:	f001 bba2 	b.w	d66d4 <memset>

000d4f90 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   d4f90:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d4f94:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d4f96:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   d4f98:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d4f9c:	4604      	mov	r4, r0
   d4f9e:	460f      	mov	r7, r1
   d4fa0:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d4fa2:	b1b3      	cbz	r3, d4fd2 <_ZN16Adafruit_SSD13065beginEhhbb+0x42>
  clearDisplay();
   d4fa4:	4620      	mov	r0, r4
   d4fa6:	f7ff ffe5 	bl	d4f74 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   d4faa:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   d4fae:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   d4fb2:	2820      	cmp	r0, #32
   d4fb4:	dc1f      	bgt.n	d4ff6 <_ZN16Adafruit_SSD13065beginEhhbb+0x66>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d4fb6:	2320      	movs	r3, #32
   d4fb8:	2201      	movs	r2, #1
   d4fba:	e9cd 3201 	strd	r3, r2, [sp, #4]
   d4fbe:	3820      	subs	r0, #32
   d4fc0:	2373      	movs	r3, #115	; 0x73
   d4fc2:	3973      	subs	r1, #115	; 0x73
   d4fc4:	9300      	str	r3, [sp, #0]
   d4fc6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d4fca:	4b89      	ldr	r3, [pc, #548]	; (d51f0 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   d4fcc:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d4fd0:	e01f      	b.n	d5012 <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d4fd2:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d4fd6:	1dd8      	adds	r0, r3, #7
   d4fd8:	bf48      	it	mi
   d4fda:	f103 000e 	addmi.w	r0, r3, #14
   d4fde:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   d4fe2:	10c0      	asrs	r0, r0, #3
   d4fe4:	4358      	muls	r0, r3
   d4fe6:	f000 fcff 	bl	d59e8 <malloc>
   d4fea:	62e0      	str	r0, [r4, #44]	; 0x2c
   d4fec:	2800      	cmp	r0, #0
   d4fee:	d1d9      	bne.n	d4fa4 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   d4ff0:	b004      	add	sp, #16
   d4ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   d4ff6:	2340      	movs	r3, #64	; 0x40
   d4ff8:	f04f 0c01 	mov.w	ip, #1
   d4ffc:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   d5000:	2352      	movs	r3, #82	; 0x52
   d5002:	3840      	subs	r0, #64	; 0x40
   d5004:	3952      	subs	r1, #82	; 0x52
   d5006:	9300      	str	r3, [sp, #0]
   d5008:	4b7a      	ldr	r3, [pc, #488]	; (d51f4 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   d500a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d500e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d5012:	f340 024f 	sbfx	r2, r0, #1, #16
   d5016:	f341 014f 	sbfx	r1, r1, #1, #16
   d501a:	4620      	mov	r0, r4
   d501c:	f7ff fb0c 	bl	d4638 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   d5020:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   d5022:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   d5026:	2800      	cmp	r0, #0
   d5028:	d078      	beq.n	d511c <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d502a:	2d00      	cmp	r5, #0
   d502c:	d174      	bne.n	d5118 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   d502e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d5032:	2b20      	cmp	r3, #32
   d5034:	bf0c      	ite	eq
   d5036:	253c      	moveq	r5, #60	; 0x3c
   d5038:	253d      	movne	r5, #61	; 0x3d
   d503a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   d503e:	f1b8 0f00 	cmp.w	r8, #0
   d5042:	d001      	beq.n	d5048 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d5044:	f001 f962 	bl	d630c <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   d5048:	b1fe      	cbz	r6, d508a <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
   d504a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d504e:	2800      	cmp	r0, #0
   d5050:	db1b      	blt.n	d508a <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
    pinMode(     rstPin, OUTPUT);
   d5052:	2101      	movs	r1, #1
   d5054:	b280      	uxth	r0, r0
   d5056:	f001 fa99 	bl	d658c <pinMode>
    digitalWrite(rstPin, HIGH);
   d505a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d505e:	2101      	movs	r1, #1
   d5060:	b280      	uxth	r0, r0
   d5062:	f001 faa4 	bl	d65ae <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   d5066:	2001      	movs	r0, #1
   d5068:	f000 feba 	bl	d5de0 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   d506c:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5070:	2100      	movs	r1, #0
   d5072:	b280      	uxth	r0, r0
   d5074:	f001 fa9b 	bl	d65ae <digitalWrite>
    delay(10);                  // Wait 10 ms
   d5078:	200a      	movs	r0, #10
   d507a:	f000 feb1 	bl	d5de0 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   d507e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5082:	2101      	movs	r1, #1
   d5084:	b280      	uxth	r0, r0
   d5086:	f001 fa92 	bl	d65ae <digitalWrite>
  TRANSACTION_START
   d508a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d508c:	2800      	cmp	r0, #0
   d508e:	d074      	beq.n	d517a <_ZN16Adafruit_SSD13065beginEhhbb+0x1ea>
   d5090:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d5092:	f001 f937 	bl	d6304 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   d5096:	2204      	movs	r2, #4
   d5098:	4957      	ldr	r1, [pc, #348]	; (d51f8 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   d509a:	4620      	mov	r0, r4
   d509c:	f7ff ff0d 	bl	d4eba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   d50a0:	7aa1      	ldrb	r1, [r4, #10]
   d50a2:	3901      	subs	r1, #1
   d50a4:	b2c9      	uxtb	r1, r1
   d50a6:	4620      	mov	r0, r4
   d50a8:	f7ff fea0 	bl	d4dec <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   d50ac:	4953      	ldr	r1, [pc, #332]	; (d51fc <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   d50ae:	2204      	movs	r2, #4
   d50b0:	4620      	mov	r0, r4
   d50b2:	f7ff ff02 	bl	d4eba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   d50b6:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d50ba:	2b01      	cmp	r3, #1
   d50bc:	bf0c      	ite	eq
   d50be:	2110      	moveq	r1, #16
   d50c0:	2114      	movne	r1, #20
   d50c2:	4620      	mov	r0, r4
   d50c4:	f7ff fe92 	bl	d4dec <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   d50c8:	2204      	movs	r2, #4
   d50ca:	494d      	ldr	r1, [pc, #308]	; (d5200 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   d50cc:	4620      	mov	r0, r4
   d50ce:	f7ff fef4 	bl	d4eba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   d50d2:	68a3      	ldr	r3, [r4, #8]
   d50d4:	4a4b      	ldr	r2, [pc, #300]	; (d5204 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   d50d6:	4293      	cmp	r3, r2
   d50d8:	d15c      	bne.n	d5194 <_ZN16Adafruit_SSD13065beginEhhbb+0x204>
    ssd1306_commandList(init4a, sizeof(init4a));
   d50da:	494b      	ldr	r1, [pc, #300]	; (d5208 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   d50dc:	2204      	movs	r2, #4
   d50de:	4620      	mov	r0, r4
   d50e0:	f7ff feeb 	bl	d4eba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   d50e4:	21d9      	movs	r1, #217	; 0xd9
   d50e6:	4620      	mov	r0, r4
   d50e8:	f7ff fe80 	bl	d4dec <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   d50ec:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d50f0:	2b01      	cmp	r3, #1
   d50f2:	bf0c      	ite	eq
   d50f4:	2122      	moveq	r1, #34	; 0x22
   d50f6:	21f1      	movne	r1, #241	; 0xf1
   d50f8:	4620      	mov	r0, r4
   d50fa:	f7ff fe77 	bl	d4dec <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   d50fe:	4620      	mov	r0, r4
   d5100:	4942      	ldr	r1, [pc, #264]	; (d520c <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   d5102:	2206      	movs	r2, #6
   d5104:	f7ff fed9 	bl	d4eba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   d5108:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d510a:	2800      	cmp	r0, #0
   d510c:	d063      	beq.n	d51d6 <_ZN16Adafruit_SSD13065beginEhhbb+0x246>
   d510e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   d5110:	f001 f8f8 	bl	d6304 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   d5114:	2001      	movs	r0, #1
   d5116:	e76b      	b.n	d4ff0 <_ZN16Adafruit_SSD13065beginEhhbb+0x60>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d5118:	b26d      	sxtb	r5, r5
   d511a:	e78e      	b.n	d503a <_ZN16Adafruit_SSD13065beginEhhbb+0xaa>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   d511c:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d5120:	2101      	movs	r1, #1
   d5122:	b280      	uxth	r0, r0
   d5124:	f001 fa32 	bl	d658c <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   d5128:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d512c:	2101      	movs	r1, #1
   d512e:	b280      	uxth	r0, r0
   d5130:	f001 fa2c 	bl	d658c <pinMode>
    SSD1306_DESELECT
   d5134:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5138:	2101      	movs	r1, #1
   d513a:	b280      	uxth	r0, r0
   d513c:	f001 fa37 	bl	d65ae <digitalWrite>
    if(spi) { // Hardware SPI
   d5140:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d5142:	b13d      	cbz	r5, d5154 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c4>
      if(periphBegin) spi->begin();
   d5144:	f1b8 0f00 	cmp.w	r8, #0
   d5148:	f43f af7e 	beq.w	d5048 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d514c:	4628      	mov	r0, r5
   d514e:	f000 fcb9 	bl	d5ac4 <_ZN8SPIClass5beginEv>
   d5152:	e779      	b.n	d5048 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   d5154:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5158:	2101      	movs	r1, #1
   d515a:	b280      	uxth	r0, r0
   d515c:	f001 fa16 	bl	d658c <pinMode>
      pinMode(clkPin , OUTPUT);
   d5160:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5164:	2101      	movs	r1, #1
   d5166:	b280      	uxth	r0, r0
   d5168:	f001 fa10 	bl	d658c <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   d516c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5170:	4629      	mov	r1, r5
   d5172:	b280      	uxth	r0, r0
   d5174:	f001 fa1b 	bl	d65ae <digitalWrite>
   d5178:	e766      	b.n	d5048 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
  TRANSACTION_START
   d517a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d517c:	b118      	cbz	r0, d5186 <_ZN16Adafruit_SSD13065beginEhhbb+0x1f6>
   d517e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d5182:	f000 fcc9 	bl	d5b18 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d5186:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d518a:	2100      	movs	r1, #0
   d518c:	b280      	uxth	r0, r0
   d518e:	f001 fa0e 	bl	d65ae <digitalWrite>
   d5192:	e780      	b.n	d5096 <_ZN16Adafruit_SSD13065beginEhhbb+0x106>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   d5194:	4a1e      	ldr	r2, [pc, #120]	; (d5210 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   d5196:	4293      	cmp	r3, r2
   d5198:	d10e      	bne.n	d51b8 <_ZN16Adafruit_SSD13065beginEhhbb+0x228>
    ssd1306_commandList(init4b, sizeof(init4b));
   d519a:	491e      	ldr	r1, [pc, #120]	; (d5214 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   d519c:	2203      	movs	r2, #3
   d519e:	4620      	mov	r0, r4
   d51a0:	f7ff fe8b 	bl	d4eba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   d51a4:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d51a8:	2b01      	cmp	r3, #1
   d51aa:	bf0c      	ite	eq
   d51ac:	219f      	moveq	r1, #159	; 0x9f
   d51ae:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d51b0:	4620      	mov	r0, r4
   d51b2:	f7ff fe1b 	bl	d4dec <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   d51b6:	e795      	b.n	d50e4 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   d51b8:	4a17      	ldr	r2, [pc, #92]	; (d5218 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   d51ba:	4293      	cmp	r3, r2
   d51bc:	d192      	bne.n	d50e4 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
    ssd1306_commandList(init4c, sizeof(init4c));
   d51be:	4917      	ldr	r1, [pc, #92]	; (d521c <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   d51c0:	2203      	movs	r2, #3
   d51c2:	4620      	mov	r0, r4
   d51c4:	f7ff fe79 	bl	d4eba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d51c8:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d51cc:	2b01      	cmp	r3, #1
   d51ce:	bf0c      	ite	eq
   d51d0:	2110      	moveq	r1, #16
   d51d2:	21af      	movne	r1, #175	; 0xaf
   d51d4:	e7ec      	b.n	d51b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
  TRANSACTION_END
   d51d6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d51da:	2101      	movs	r1, #1
   d51dc:	b280      	uxth	r0, r0
   d51de:	f001 f9e6 	bl	d65ae <digitalWrite>
   d51e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d51e4:	2800      	cmp	r0, #0
   d51e6:	d095      	beq.n	d5114 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d51e8:	f000 fc7d 	bl	d5ae6 <_ZN8SPIClass14endTransactionEv>
   d51ec:	e792      	b.n	d5114 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d51ee:	bf00      	nop
   d51f0:	000d705c 	.word	0x000d705c
   d51f4:	000d6d9c 	.word	0x000d6d9c
   d51f8:	000d72a4 	.word	0x000d72a4
   d51fc:	000d72a8 	.word	0x000d72a8
   d5200:	000d72ac 	.word	0x000d72ac
   d5204:	00200080 	.word	0x00200080
   d5208:	000d72b6 	.word	0x000d72b6
   d520c:	000d72b0 	.word	0x000d72b0
   d5210:	00400080 	.word	0x00400080
   d5214:	000d72ba 	.word	0x000d72ba
   d5218:	00100060 	.word	0x00100060
   d521c:	000d72bd 	.word	0x000d72bd

000d5220 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5220:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d5222:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5224:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d5228:	db3d      	blt.n	d52a6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d522a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d522e:	4294      	cmp	r4, r2
   d5230:	dd39      	ble.n	d52a6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   d5232:	2900      	cmp	r1, #0
      w += x;
   d5234:	bfbe      	ittt	lt
   d5236:	185b      	addlt	r3, r3, r1
   d5238:	b21b      	sxthlt	r3, r3
      x  = 0;
   d523a:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   d523c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d5240:	18ce      	adds	r6, r1, r3
   d5242:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   d5244:	bfc4      	itt	gt
   d5246:	1a63      	subgt	r3, r4, r1
   d5248:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   d524a:	2b00      	cmp	r3, #0
   d524c:	dd2b      	ble.n	d52a6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   d524e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5250:	10d6      	asrs	r6, r2, #3
   d5252:	fb14 1106 	smlabb	r1, r4, r6, r1
   d5256:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   d5258:	f002 0007 	and.w	r0, r2, #7
   d525c:	2201      	movs	r2, #1
   d525e:	4082      	lsls	r2, r0
      switch(color) {
   d5260:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   d5262:	b2d2      	uxtb	r2, r2
      switch(color) {
   d5264:	d016      	beq.n	d5294 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   d5266:	2d02      	cmp	r5, #2
   d5268:	d00b      	beq.n	d5282 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   d526a:	b9e5      	cbnz	r5, d52a6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   d526c:	43d2      	mvns	r2, r2
   d526e:	b2d2      	uxtb	r2, r2
   d5270:	440b      	add	r3, r1
   d5272:	4299      	cmp	r1, r3
   d5274:	d017      	beq.n	d52a6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5276:	f811 0b01 	ldrb.w	r0, [r1], #1
   d527a:	4010      	ands	r0, r2
   d527c:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5280:	e7f7      	b.n	d5272 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   d5282:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   d5284:	4299      	cmp	r1, r3
   d5286:	d00e      	beq.n	d52a6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5288:	f811 0b01 	ldrb.w	r0, [r1], #1
   d528c:	4050      	eors	r0, r2
   d528e:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5292:	e7f7      	b.n	d5284 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   d5294:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   d5296:	4299      	cmp	r1, r3
   d5298:	d005      	beq.n	d52a6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d529a:	f811 0b01 	ldrb.w	r0, [r1], #1
   d529e:	4310      	orrs	r0, r2
   d52a0:	f801 0c01 	strb.w	r0, [r1, #-1]
   d52a4:	e7f7      	b.n	d5296 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   d52a6:	bd70      	pop	{r4, r5, r6, pc}

000d52a8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d52a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d52aa:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d52ac:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d52b0:	db76      	blt.n	d53a0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   d52b2:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d52b6:	42a9      	cmp	r1, r5
   d52b8:	da72      	bge.n	d53a0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   d52ba:	2a00      	cmp	r2, #0
      __h += __y;
   d52bc:	bfbc      	itt	lt
   d52be:	18d2      	addlt	r2, r2, r3
   d52c0:	b213      	sxthlt	r3, r2
    if((__y + __h) > HEIGHT) { // Clip bottom
   d52c2:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
      __y = 0;
   d52c6:	bfb8      	it	lt
   d52c8:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   d52ca:	18d7      	adds	r7, r2, r3
   d52cc:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   d52ce:	bfc4      	itt	gt
   d52d0:	1aa3      	subgt	r3, r4, r2
   d52d2:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   d52d4:	2b00      	cmp	r3, #0
   d52d6:	dd63      	ble.n	d53a0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d52d8:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   d52dc:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   d52de:	fb15 1104 	smlabb	r1, r5, r4, r1
      if(mod) {
   d52e2:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   d52e6:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d52e8:	eb07 0401 	add.w	r4, r7, r1
      if(mod) {
   d52ec:	d023      	beq.n	d5336 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8e>
        mod = 8 - mod;
   d52ee:	f1c2 0208 	rsb	r2, r2, #8
   d52f2:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d52f4:	4d2c      	ldr	r5, [pc, #176]	; (d53a8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   d52f6:	4293      	cmp	r3, r2
   d52f8:	bf3c      	itt	cc
   d52fa:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   d52fe:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d5302:	5cad      	ldrb	r5, [r5, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   d5304:	bf3c      	itt	cc
   d5306:	fa4c fc0e 	asrcc.w	ip, ip, lr
   d530a:	ea0c 0505 	andcc.w	r5, ip, r5
        switch(color) {
   d530e:	2e01      	cmp	r6, #1
   d5310:	d007      	beq.n	d5322 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x7a>
   d5312:	2e02      	cmp	r6, #2
   d5314:	d02e      	beq.n	d5374 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xcc>
   d5316:	b94e      	cbnz	r6, d532c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x84>
         case BLACK:   *pBuf &= ~mask; break;
   d5318:	f817 c001 	ldrb.w	ip, [r7, r1]
   d531c:	ea2c 0505 	bic.w	r5, ip, r5
   d5320:	e003      	b.n	d532a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case WHITE:   *pBuf |=  mask; break;
   d5322:	f817 c001 	ldrb.w	ip, [r7, r1]
   d5326:	ea45 050c 	orr.w	r5, r5, ip
         case INVERSE: *pBuf ^=  mask; break;
   d532a:	547d      	strb	r5, [r7, r1]
      if(h >= mod) { // More to go?
   d532c:	4293      	cmp	r3, r2
   d532e:	d337      	bcc.n	d53a0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   d5330:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   d5334:	440c      	add	r4, r1
        h -= mod;
   d5336:	1a9a      	subs	r2, r3, r2
   d5338:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   d533a:	2a07      	cmp	r2, #7
   d533c:	d90e      	bls.n	d535c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb4>
          if(color == INVERSE) {
   d533e:	2e02      	cmp	r6, #2
   d5340:	d11d      	bne.n	d537e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd6>
   d5342:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   d5344:	7821      	ldrb	r1, [r4, #0]
   d5346:	43c9      	mvns	r1, r1
   d5348:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   d534a:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   d534c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   d5350:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d5352:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   d5354:	440c      	add	r4, r1
            } while(h >= 8);
   d5356:	d8f5      	bhi.n	d5344 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9c>
   d5358:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   d535c:	b302      	cbz	r2, d53a0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d535e:	4b13      	ldr	r3, [pc, #76]	; (d53ac <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   d5360:	2e01      	cmp	r6, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d5362:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   d5364:	d019      	beq.n	d539a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   d5366:	2e02      	cmp	r6, #2
   d5368:	d01b      	beq.n	d53a2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   d536a:	b9ce      	cbnz	r6, d53a0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   d536c:	7822      	ldrb	r2, [r4, #0]
   d536e:	ea22 0303 	bic.w	r3, r2, r3
   d5372:	e014      	b.n	d539e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   d5374:	f817 c001 	ldrb.w	ip, [r7, r1]
   d5378:	ea85 050c 	eor.w	r5, r5, ip
   d537c:	e7d5      	b.n	d532a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
            uint8_t val = (color != BLACK) ? 255 : 0;
   d537e:	2e00      	cmp	r6, #0
   d5380:	bf14      	ite	ne
   d5382:	25ff      	movne	r5, #255	; 0xff
   d5384:	2500      	moveq	r5, #0
   d5386:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   d5388:	7025      	strb	r5, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   d538a:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   d538c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   d5390:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d5392:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   d5394:	440c      	add	r4, r1
            } while(h >= 8);
   d5396:	d8f7      	bhi.n	d5388 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   d5398:	e7de      	b.n	d5358 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb0>
           case WHITE:   *pBuf |=  mask; break;
   d539a:	7822      	ldrb	r2, [r4, #0]
   d539c:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   d539e:	7023      	strb	r3, [r4, #0]
}
   d53a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   d53a2:	7822      	ldrb	r2, [r4, #0]
   d53a4:	4053      	eors	r3, r2
   d53a6:	e7fa      	b.n	d539e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   d53a8:	000d7294 	.word	0x000d7294
   d53ac:	000d729c 	.word	0x000d729c

000d53b0 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d53b0:	b470      	push	{r4, r5, r6}
   d53b2:	4614      	mov	r4, r2
  switch(rotation) {
   d53b4:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d53b6:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   d53ba:	2a02      	cmp	r2, #2
   d53bc:	d00d      	beq.n	d53da <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   d53be:	2a03      	cmp	r2, #3
   d53c0:	d018      	beq.n	d53f4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   d53c2:	2a01      	cmp	r2, #1
   d53c4:	d111      	bne.n	d53ea <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   d53c6:	8902      	ldrh	r2, [r0, #8]
   d53c8:	43e4      	mvns	r4, r4
   d53ca:	4414      	add	r4, r2
   d53cc:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d53ce:	9603      	str	r6, [sp, #12]
   d53d0:	460a      	mov	r2, r1
   d53d2:	4621      	mov	r1, r4
}
   d53d4:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d53d6:	f7ff bf67 	b.w	d52a8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   d53da:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   d53dc:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   d53de:	43e4      	mvns	r4, r4
    x -= (w-1);
   d53e0:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   d53e2:	4414      	add	r4, r2
    x -= (w-1);
   d53e4:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   d53e6:	b224      	sxth	r4, r4
    x -= (w-1);
   d53e8:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   d53ea:	9603      	str	r6, [sp, #12]
   d53ec:	4622      	mov	r2, r4
}
   d53ee:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   d53f0:	f7ff bf16 	b.w	d5220 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   d53f4:	8945      	ldrh	r5, [r0, #10]
   d53f6:	4419      	add	r1, r3
   d53f8:	1a69      	subs	r1, r5, r1
   d53fa:	b209      	sxth	r1, r1
    break;
   d53fc:	e7e7      	b.n	d53ce <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000d53fe <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d53fe:	b430      	push	{r4, r5}
   d5400:	4614      	mov	r4, r2
  switch(rotation) {
   d5402:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d5404:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   d5408:	2a02      	cmp	r2, #2
   d540a:	d00d      	beq.n	d5428 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   d540c:	2a03      	cmp	r2, #3
   d540e:	d018      	beq.n	d5442 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   d5410:	2a01      	cmp	r2, #1
   d5412:	d111      	bne.n	d5438 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   d5414:	18e2      	adds	r2, r4, r3
   d5416:	8904      	ldrh	r4, [r0, #8]
   d5418:	1aa4      	subs	r4, r4, r2
   d541a:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d541c:	9502      	str	r5, [sp, #8]
   d541e:	460a      	mov	r2, r1
   d5420:	4621      	mov	r1, r4
}
   d5422:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d5424:	f7ff befc 	b.w	d5220 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   d5428:	8902      	ldrh	r2, [r0, #8]
   d542a:	43c9      	mvns	r1, r1
   d542c:	4411      	add	r1, r2
    y -= (h-1);
   d542e:	18e2      	adds	r2, r4, r3
   d5430:	8944      	ldrh	r4, [r0, #10]
   d5432:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   d5434:	b209      	sxth	r1, r1
    y -= (h-1);
   d5436:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   d5438:	9502      	str	r5, [sp, #8]
   d543a:	4622      	mov	r2, r4
}
   d543c:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   d543e:	f7ff bf33 	b.w	d52a8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   d5442:	8942      	ldrh	r2, [r0, #10]
   d5444:	43c9      	mvns	r1, r1
   d5446:	4411      	add	r1, r2
   d5448:	b209      	sxth	r1, r1
    break;
   d544a:	e7e7      	b.n	d541c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000d544c <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   d544c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5450:	4604      	mov	r4, r0
  TRANSACTION_START
   d5452:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d5454:	2800      	cmp	r0, #0
   d5456:	d042      	beq.n	d54de <_ZN16Adafruit_SSD13067displayEv+0x92>
   d5458:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d545a:	f000 ff53 	bl	d6304 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   d545e:	4947      	ldr	r1, [pc, #284]	; (d557c <_ZN16Adafruit_SSD13067displayEv+0x130>)
   d5460:	2205      	movs	r2, #5
   d5462:	4620      	mov	r0, r4
   d5464:	f7ff fd29 	bl	d4eba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   d5468:	7a21      	ldrb	r1, [r4, #8]
   d546a:	3901      	subs	r1, #1
   d546c:	4620      	mov	r0, r4
   d546e:	b2c9      	uxtb	r1, r1
   d5470:	f7ff fcbc 	bl	d4dec <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d5474:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d5478:	1dde      	adds	r6, r3, #7
   d547a:	bf48      	it	mi
   d547c:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   d5480:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d5484:	8923      	ldrh	r3, [r4, #8]
   d5486:	10f6      	asrs	r6, r6, #3
   d5488:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   d548c:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   d5490:	2800      	cmp	r0, #0
   d5492:	d03a      	beq.n	d550a <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   d5494:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5498:	f000 ff42 	bl	d6320 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   d549c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d549e:	6803      	ldr	r3, [r0, #0]
   d54a0:	2140      	movs	r1, #64	; 0x40
   d54a2:	689b      	ldr	r3, [r3, #8]
   d54a4:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d54a6:	2701      	movs	r7, #1
    while(count--) {
   d54a8:	42b5      	cmp	r5, r6
   d54aa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d54ac:	d024      	beq.n	d54f8 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   d54ae:	2f1f      	cmp	r7, #31
   d54b0:	d90c      	bls.n	d54cc <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   d54b2:	f000 ff3c 	bl	d632e <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d54b6:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d54ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d54bc:	f000 ff30 	bl	d6320 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   d54c0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d54c2:	6803      	ldr	r3, [r0, #0]
   d54c4:	2140      	movs	r1, #64	; 0x40
   d54c6:	689b      	ldr	r3, [r3, #8]
   d54c8:	4798      	blx	r3
        bytesOut = 1;
   d54ca:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   d54cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d54ce:	f815 1b01 	ldrb.w	r1, [r5], #1
   d54d2:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d54d4:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   d54d6:	689b      	ldr	r3, [r3, #8]
   d54d8:	4798      	blx	r3
      bytesOut++;
   d54da:	b2ff      	uxtb	r7, r7
    while(count--) {
   d54dc:	e7e4      	b.n	d54a8 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   d54de:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d54e0:	b118      	cbz	r0, d54ea <_ZN16Adafruit_SSD13067displayEv+0x9e>
   d54e2:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d54e6:	f000 fb17 	bl	d5b18 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d54ea:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d54ee:	2100      	movs	r1, #0
   d54f0:	b280      	uxth	r0, r0
   d54f2:	f001 f85c 	bl	d65ae <digitalWrite>
   d54f6:	e7b2      	b.n	d545e <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   d54f8:	f000 ff19 	bl	d632e <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   d54fc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d54fe:	b378      	cbz	r0, d5560 <_ZN16Adafruit_SSD13067displayEv+0x114>
   d5500:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d5502:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5506:	f000 befd 	b.w	d6304 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   d550a:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d550e:	2101      	movs	r1, #1
   d5510:	b280      	uxth	r0, r0
   d5512:	f001 f84c 	bl	d65ae <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   d5516:	42b5      	cmp	r5, r6
   d5518:	d0f0      	beq.n	d54fc <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   d551a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   d551c:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d5520:	b118      	cbz	r0, d552a <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   d5522:	4649      	mov	r1, r9
   d5524:	f000 fb66 	bl	d5bf4 <_ZN8SPIClass8transferEh>
   d5528:	e7f5      	b.n	d5516 <_ZN16Adafruit_SSD13067displayEv+0xca>
   d552a:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d552c:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d5530:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5534:	ea09 0108 	and.w	r1, r9, r8
   d5538:	b280      	uxth	r0, r0
   d553a:	f001 f838 	bl	d65ae <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d553e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5542:	2101      	movs	r1, #1
   d5544:	b280      	uxth	r0, r0
   d5546:	f001 f832 	bl	d65ae <digitalWrite>
      digitalWrite(clkPin , LOW);
   d554a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d554e:	2100      	movs	r1, #0
   d5550:	b280      	uxth	r0, r0
   d5552:	f001 f82c 	bl	d65ae <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5556:	3f01      	subs	r7, #1
   d5558:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d555c:	d1e8      	bne.n	d5530 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   d555e:	e7da      	b.n	d5516 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   d5560:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5564:	2101      	movs	r1, #1
   d5566:	b280      	uxth	r0, r0
   d5568:	f001 f821 	bl	d65ae <digitalWrite>
   d556c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d556e:	b118      	cbz	r0, d5578 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   d5570:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   d5574:	f000 bab7 	b.w	d5ae6 <_ZN8SPIClass14endTransactionEv>
}
   d5578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d557c:	000d72c0 	.word	0x000d72c0

000d5580 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5580:	b508      	push	{r3, lr}
   d5582:	4b02      	ldr	r3, [pc, #8]	; (d558c <netdb_freeaddrinfo+0xc>)
   d5584:	681b      	ldr	r3, [r3, #0]
   d5586:	689b      	ldr	r3, [r3, #8]
   d5588:	9301      	str	r3, [sp, #4]
   d558a:	bd08      	pop	{r3, pc}
   d558c:	00030268 	.word	0x00030268

000d5590 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5590:	b508      	push	{r3, lr}
   d5592:	4b02      	ldr	r3, [pc, #8]	; (d559c <netdb_getaddrinfo+0xc>)
   d5594:	681b      	ldr	r3, [r3, #0]
   d5596:	68db      	ldr	r3, [r3, #12]
   d5598:	9301      	str	r3, [sp, #4]
   d559a:	bd08      	pop	{r3, pc}
   d559c:	00030268 	.word	0x00030268

000d55a0 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d55a0:	b508      	push	{r3, lr}
   d55a2:	4b02      	ldr	r3, [pc, #8]	; (d55ac <HAL_Pin_Mode+0xc>)
   d55a4:	681b      	ldr	r3, [r3, #0]
   d55a6:	689b      	ldr	r3, [r3, #8]
   d55a8:	9301      	str	r3, [sp, #4]
   d55aa:	bd08      	pop	{r3, pc}
   d55ac:	0003022c 	.word	0x0003022c

000d55b0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d55b0:	b508      	push	{r3, lr}
   d55b2:	4b02      	ldr	r3, [pc, #8]	; (d55bc <HAL_Get_Pin_Mode+0xc>)
   d55b4:	681b      	ldr	r3, [r3, #0]
   d55b6:	68db      	ldr	r3, [r3, #12]
   d55b8:	9301      	str	r3, [sp, #4]
   d55ba:	bd08      	pop	{r3, pc}
   d55bc:	0003022c 	.word	0x0003022c

000d55c0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d55c0:	b508      	push	{r3, lr}
   d55c2:	4b02      	ldr	r3, [pc, #8]	; (d55cc <HAL_GPIO_Write+0xc>)
   d55c4:	681b      	ldr	r3, [r3, #0]
   d55c6:	691b      	ldr	r3, [r3, #16]
   d55c8:	9301      	str	r3, [sp, #4]
   d55ca:	bd08      	pop	{r3, pc}
   d55cc:	0003022c 	.word	0x0003022c

000d55d0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d55d0:	b508      	push	{r3, lr}
   d55d2:	4b02      	ldr	r3, [pc, #8]	; (d55dc <HAL_GPIO_Read+0xc>)
   d55d4:	681b      	ldr	r3, [r3, #0]
   d55d6:	695b      	ldr	r3, [r3, #20]
   d55d8:	9301      	str	r3, [sp, #4]
   d55da:	bd08      	pop	{r3, pc}
   d55dc:	0003022c 	.word	0x0003022c

000d55e0 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d55e0:	b508      	push	{r3, lr}
   d55e2:	4b02      	ldr	r3, [pc, #8]	; (d55ec <HAL_Interrupts_Attach+0xc>)
   d55e4:	681b      	ldr	r3, [r3, #0]
   d55e6:	699b      	ldr	r3, [r3, #24]
   d55e8:	9301      	str	r3, [sp, #4]
   d55ea:	bd08      	pop	{r3, pc}
   d55ec:	0003022c 	.word	0x0003022c

000d55f0 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d55f0:	b508      	push	{r3, lr}
   d55f2:	4b02      	ldr	r3, [pc, #8]	; (d55fc <HAL_Interrupts_Detach+0xc>)
   d55f4:	681b      	ldr	r3, [r3, #0]
   d55f6:	69db      	ldr	r3, [r3, #28]
   d55f8:	9301      	str	r3, [sp, #4]
   d55fa:	bd08      	pop	{r3, pc}
   d55fc:	0003022c 	.word	0x0003022c

000d5600 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d5600:	b508      	push	{r3, lr}
   d5602:	4b02      	ldr	r3, [pc, #8]	; (d560c <HAL_Interrupts_Enable_All+0xc>)
   d5604:	681b      	ldr	r3, [r3, #0]
   d5606:	6a1b      	ldr	r3, [r3, #32]
   d5608:	9301      	str	r3, [sp, #4]
   d560a:	bd08      	pop	{r3, pc}
   d560c:	0003022c 	.word	0x0003022c

000d5610 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5610:	b508      	push	{r3, lr}
   d5612:	4b02      	ldr	r3, [pc, #8]	; (d561c <HAL_RNG_GetRandomNumber+0xc>)
   d5614:	681b      	ldr	r3, [r3, #0]
   d5616:	685b      	ldr	r3, [r3, #4]
   d5618:	9301      	str	r3, [sp, #4]
   d561a:	bd08      	pop	{r3, pc}
   d561c:	00030218 	.word	0x00030218

000d5620 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5620:	b508      	push	{r3, lr}
   d5622:	4b02      	ldr	r3, [pc, #8]	; (d562c <HAL_Delay_Microseconds+0xc>)
   d5624:	681b      	ldr	r3, [r3, #0]
   d5626:	68db      	ldr	r3, [r3, #12]
   d5628:	9301      	str	r3, [sp, #4]
   d562a:	bd08      	pop	{r3, pc}
   d562c:	00030218 	.word	0x00030218

000d5630 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5630:	b508      	push	{r3, lr}
   d5632:	4b02      	ldr	r3, [pc, #8]	; (d563c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5634:	681b      	ldr	r3, [r3, #0]
   d5636:	695b      	ldr	r3, [r3, #20]
   d5638:	9301      	str	r3, [sp, #4]
   d563a:	bd08      	pop	{r3, pc}
   d563c:	00030218 	.word	0x00030218

000d5640 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5640:	b508      	push	{r3, lr}
   d5642:	4b02      	ldr	r3, [pc, #8]	; (d564c <os_mutex_create+0xc>)
   d5644:	681b      	ldr	r3, [r3, #0]
   d5646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5648:	9301      	str	r3, [sp, #4]
   d564a:	bd08      	pop	{r3, pc}
   d564c:	00030248 	.word	0x00030248

000d5650 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   d5650:	b508      	push	{r3, lr}
   d5652:	4b02      	ldr	r3, [pc, #8]	; (d565c <os_mutex_destroy+0xc>)
   d5654:	681b      	ldr	r3, [r3, #0]
   d5656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5658:	9301      	str	r3, [sp, #4]
   d565a:	bd08      	pop	{r3, pc}
   d565c:	00030248 	.word	0x00030248

000d5660 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5660:	b508      	push	{r3, lr}
   d5662:	4b02      	ldr	r3, [pc, #8]	; (d566c <os_mutex_recursive_create+0xc>)
   d5664:	681b      	ldr	r3, [r3, #0]
   d5666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5668:	9301      	str	r3, [sp, #4]
   d566a:	bd08      	pop	{r3, pc}
   d566c:	00030248 	.word	0x00030248

000d5670 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5670:	b508      	push	{r3, lr}
   d5672:	4b02      	ldr	r3, [pc, #8]	; (d567c <os_mutex_recursive_destroy+0xc>)
   d5674:	681b      	ldr	r3, [r3, #0]
   d5676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5678:	9301      	str	r3, [sp, #4]
   d567a:	bd08      	pop	{r3, pc}
   d567c:	00030248 	.word	0x00030248

000d5680 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5680:	b508      	push	{r3, lr}
   d5682:	4b02      	ldr	r3, [pc, #8]	; (d568c <inet_inet_ntop+0xc>)
   d5684:	681b      	ldr	r3, [r3, #0]
   d5686:	695b      	ldr	r3, [r3, #20]
   d5688:	9301      	str	r3, [sp, #4]
   d568a:	bd08      	pop	{r3, pc}
   d568c:	00030264 	.word	0x00030264

000d5690 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5690:	b508      	push	{r3, lr}
   d5692:	4b02      	ldr	r3, [pc, #8]	; (d569c <hal_usart_init+0xc>)
   d5694:	681b      	ldr	r3, [r3, #0]
   d5696:	681b      	ldr	r3, [r3, #0]
   d5698:	9301      	str	r3, [sp, #4]
   d569a:	bd08      	pop	{r3, pc}
   d569c:	0003023c 	.word	0x0003023c

000d56a0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d56a0:	b508      	push	{r3, lr}
   d56a2:	4b02      	ldr	r3, [pc, #8]	; (d56ac <hal_usart_write+0xc>)
   d56a4:	681b      	ldr	r3, [r3, #0]
   d56a6:	68db      	ldr	r3, [r3, #12]
   d56a8:	9301      	str	r3, [sp, #4]
   d56aa:	bd08      	pop	{r3, pc}
   d56ac:	0003023c 	.word	0x0003023c

000d56b0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d56b0:	b508      	push	{r3, lr}
   d56b2:	4b02      	ldr	r3, [pc, #8]	; (d56bc <hal_usart_available+0xc>)
   d56b4:	681b      	ldr	r3, [r3, #0]
   d56b6:	691b      	ldr	r3, [r3, #16]
   d56b8:	9301      	str	r3, [sp, #4]
   d56ba:	bd08      	pop	{r3, pc}
   d56bc:	0003023c 	.word	0x0003023c

000d56c0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d56c0:	b508      	push	{r3, lr}
   d56c2:	4b02      	ldr	r3, [pc, #8]	; (d56cc <hal_usart_read+0xc>)
   d56c4:	681b      	ldr	r3, [r3, #0]
   d56c6:	695b      	ldr	r3, [r3, #20]
   d56c8:	9301      	str	r3, [sp, #4]
   d56ca:	bd08      	pop	{r3, pc}
   d56cc:	0003023c 	.word	0x0003023c

000d56d0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d56d0:	b508      	push	{r3, lr}
   d56d2:	4b02      	ldr	r3, [pc, #8]	; (d56dc <hal_usart_peek+0xc>)
   d56d4:	681b      	ldr	r3, [r3, #0]
   d56d6:	699b      	ldr	r3, [r3, #24]
   d56d8:	9301      	str	r3, [sp, #4]
   d56da:	bd08      	pop	{r3, pc}
   d56dc:	0003023c 	.word	0x0003023c

000d56e0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d56e0:	b508      	push	{r3, lr}
   d56e2:	4b02      	ldr	r3, [pc, #8]	; (d56ec <hal_usart_flush+0xc>)
   d56e4:	681b      	ldr	r3, [r3, #0]
   d56e6:	69db      	ldr	r3, [r3, #28]
   d56e8:	9301      	str	r3, [sp, #4]
   d56ea:	bd08      	pop	{r3, pc}
   d56ec:	0003023c 	.word	0x0003023c

000d56f0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d56f0:	b508      	push	{r3, lr}
   d56f2:	4b02      	ldr	r3, [pc, #8]	; (d56fc <hal_usart_is_enabled+0xc>)
   d56f4:	681b      	ldr	r3, [r3, #0]
   d56f6:	6a1b      	ldr	r3, [r3, #32]
   d56f8:	9301      	str	r3, [sp, #4]
   d56fa:	bd08      	pop	{r3, pc}
   d56fc:	0003023c 	.word	0x0003023c

000d5700 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5700:	b508      	push	{r3, lr}
   d5702:	4b02      	ldr	r3, [pc, #8]	; (d570c <hal_usart_available_data_for_write+0xc>)
   d5704:	681b      	ldr	r3, [r3, #0]
   d5706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5708:	9301      	str	r3, [sp, #4]
   d570a:	bd08      	pop	{r3, pc}
   d570c:	0003023c 	.word	0x0003023c

000d5710 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d5710:	b508      	push	{r3, lr}
   d5712:	4b02      	ldr	r3, [pc, #8]	; (d571c <hal_i2c_set_speed+0xc>)
   d5714:	681b      	ldr	r3, [r3, #0]
   d5716:	681b      	ldr	r3, [r3, #0]
   d5718:	9301      	str	r3, [sp, #4]
   d571a:	bd08      	pop	{r3, pc}
   d571c:	00030228 	.word	0x00030228

000d5720 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5720:	b508      	push	{r3, lr}
   d5722:	4b02      	ldr	r3, [pc, #8]	; (d572c <hal_i2c_begin+0xc>)
   d5724:	681b      	ldr	r3, [r3, #0]
   d5726:	68db      	ldr	r3, [r3, #12]
   d5728:	9301      	str	r3, [sp, #4]
   d572a:	bd08      	pop	{r3, pc}
   d572c:	00030228 	.word	0x00030228

000d5730 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5730:	b508      	push	{r3, lr}
   d5732:	4b02      	ldr	r3, [pc, #8]	; (d573c <hal_i2c_begin_transmission+0xc>)
   d5734:	681b      	ldr	r3, [r3, #0]
   d5736:	699b      	ldr	r3, [r3, #24]
   d5738:	9301      	str	r3, [sp, #4]
   d573a:	bd08      	pop	{r3, pc}
   d573c:	00030228 	.word	0x00030228

000d5740 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5740:	b508      	push	{r3, lr}
   d5742:	4b02      	ldr	r3, [pc, #8]	; (d574c <hal_i2c_end_transmission+0xc>)
   d5744:	681b      	ldr	r3, [r3, #0]
   d5746:	69db      	ldr	r3, [r3, #28]
   d5748:	9301      	str	r3, [sp, #4]
   d574a:	bd08      	pop	{r3, pc}
   d574c:	00030228 	.word	0x00030228

000d5750 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5750:	b508      	push	{r3, lr}
   d5752:	4b02      	ldr	r3, [pc, #8]	; (d575c <hal_i2c_write+0xc>)
   d5754:	681b      	ldr	r3, [r3, #0]
   d5756:	6a1b      	ldr	r3, [r3, #32]
   d5758:	9301      	str	r3, [sp, #4]
   d575a:	bd08      	pop	{r3, pc}
   d575c:	00030228 	.word	0x00030228

000d5760 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5760:	b508      	push	{r3, lr}
   d5762:	4b02      	ldr	r3, [pc, #8]	; (d576c <hal_i2c_available+0xc>)
   d5764:	681b      	ldr	r3, [r3, #0]
   d5766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5768:	9301      	str	r3, [sp, #4]
   d576a:	bd08      	pop	{r3, pc}
   d576c:	00030228 	.word	0x00030228

000d5770 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5770:	b508      	push	{r3, lr}
   d5772:	4b02      	ldr	r3, [pc, #8]	; (d577c <hal_i2c_read+0xc>)
   d5774:	681b      	ldr	r3, [r3, #0]
   d5776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5778:	9301      	str	r3, [sp, #4]
   d577a:	bd08      	pop	{r3, pc}
   d577c:	00030228 	.word	0x00030228

000d5780 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5780:	b508      	push	{r3, lr}
   d5782:	4b02      	ldr	r3, [pc, #8]	; (d578c <hal_i2c_peek+0xc>)
   d5784:	681b      	ldr	r3, [r3, #0]
   d5786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5788:	9301      	str	r3, [sp, #4]
   d578a:	bd08      	pop	{r3, pc}
   d578c:	00030228 	.word	0x00030228

000d5790 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5790:	b508      	push	{r3, lr}
   d5792:	4b02      	ldr	r3, [pc, #8]	; (d579c <hal_i2c_flush+0xc>)
   d5794:	681b      	ldr	r3, [r3, #0]
   d5796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5798:	9301      	str	r3, [sp, #4]
   d579a:	bd08      	pop	{r3, pc}
   d579c:	00030228 	.word	0x00030228

000d57a0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d57a0:	b508      	push	{r3, lr}
   d57a2:	4b02      	ldr	r3, [pc, #8]	; (d57ac <hal_i2c_is_enabled+0xc>)
   d57a4:	681b      	ldr	r3, [r3, #0]
   d57a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d57a8:	9301      	str	r3, [sp, #4]
   d57aa:	bd08      	pop	{r3, pc}
   d57ac:	00030228 	.word	0x00030228

000d57b0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d57b0:	b508      	push	{r3, lr}
   d57b2:	4b02      	ldr	r3, [pc, #8]	; (d57bc <hal_i2c_init+0xc>)
   d57b4:	681b      	ldr	r3, [r3, #0]
   d57b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d57b8:	9301      	str	r3, [sp, #4]
   d57ba:	bd08      	pop	{r3, pc}
   d57bc:	00030228 	.word	0x00030228

000d57c0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d57c0:	b508      	push	{r3, lr}
   d57c2:	4b02      	ldr	r3, [pc, #8]	; (d57cc <hal_spi_begin+0xc>)
   d57c4:	681b      	ldr	r3, [r3, #0]
   d57c6:	681b      	ldr	r3, [r3, #0]
   d57c8:	9301      	str	r3, [sp, #4]
   d57ca:	bd08      	pop	{r3, pc}
   d57cc:	00030230 	.word	0x00030230

000d57d0 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d57d0:	b508      	push	{r3, lr}
   d57d2:	4b02      	ldr	r3, [pc, #8]	; (d57dc <hal_spi_transfer+0xc>)
   d57d4:	681b      	ldr	r3, [r3, #0]
   d57d6:	695b      	ldr	r3, [r3, #20]
   d57d8:	9301      	str	r3, [sp, #4]
   d57da:	bd08      	pop	{r3, pc}
   d57dc:	00030230 	.word	0x00030230

000d57e0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d57e0:	b508      	push	{r3, lr}
   d57e2:	4b02      	ldr	r3, [pc, #8]	; (d57ec <hal_spi_init+0xc>)
   d57e4:	681b      	ldr	r3, [r3, #0]
   d57e6:	69db      	ldr	r3, [r3, #28]
   d57e8:	9301      	str	r3, [sp, #4]
   d57ea:	bd08      	pop	{r3, pc}
   d57ec:	00030230 	.word	0x00030230

000d57f0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d57f0:	b508      	push	{r3, lr}
   d57f2:	4b02      	ldr	r3, [pc, #8]	; (d57fc <hal_spi_is_enabled+0xc>)
   d57f4:	681b      	ldr	r3, [r3, #0]
   d57f6:	6a1b      	ldr	r3, [r3, #32]
   d57f8:	9301      	str	r3, [sp, #4]
   d57fa:	bd08      	pop	{r3, pc}
   d57fc:	00030230 	.word	0x00030230

000d5800 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d5800:	b508      	push	{r3, lr}
   d5802:	4b02      	ldr	r3, [pc, #8]	; (d580c <hal_spi_info+0xc>)
   d5804:	681b      	ldr	r3, [r3, #0]
   d5806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5808:	9301      	str	r3, [sp, #4]
   d580a:	bd08      	pop	{r3, pc}
   d580c:	00030230 	.word	0x00030230

000d5810 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5810:	b508      	push	{r3, lr}
   d5812:	4b02      	ldr	r3, [pc, #8]	; (d581c <hal_spi_set_settings+0xc>)
   d5814:	681b      	ldr	r3, [r3, #0]
   d5816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5818:	9301      	str	r3, [sp, #4]
   d581a:	bd08      	pop	{r3, pc}
   d581c:	00030230 	.word	0x00030230

000d5820 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d5820:	b508      	push	{r3, lr}
   d5822:	4b02      	ldr	r3, [pc, #8]	; (d582c <hal_spi_acquire+0xc>)
   d5824:	681b      	ldr	r3, [r3, #0]
   d5826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5828:	9301      	str	r3, [sp, #4]
   d582a:	bd08      	pop	{r3, pc}
   d582c:	00030230 	.word	0x00030230

000d5830 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d5830:	b508      	push	{r3, lr}
   d5832:	4b02      	ldr	r3, [pc, #8]	; (d583c <hal_spi_release+0xc>)
   d5834:	681b      	ldr	r3, [r3, #0]
   d5836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5838:	9301      	str	r3, [sp, #4]
   d583a:	bd08      	pop	{r3, pc}
   d583c:	00030230 	.word	0x00030230

000d5840 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5840:	b508      	push	{r3, lr}
   d5842:	4b02      	ldr	r3, [pc, #8]	; (d584c <HAL_USB_USART_Init+0xc>)
   d5844:	681b      	ldr	r3, [r3, #0]
   d5846:	681b      	ldr	r3, [r3, #0]
   d5848:	9301      	str	r3, [sp, #4]
   d584a:	bd08      	pop	{r3, pc}
   d584c:	0003024c 	.word	0x0003024c

000d5850 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5850:	b508      	push	{r3, lr}
   d5852:	4b02      	ldr	r3, [pc, #8]	; (d585c <HAL_USB_USART_Begin+0xc>)
   d5854:	681b      	ldr	r3, [r3, #0]
   d5856:	685b      	ldr	r3, [r3, #4]
   d5858:	9301      	str	r3, [sp, #4]
   d585a:	bd08      	pop	{r3, pc}
   d585c:	0003024c 	.word	0x0003024c

000d5860 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5860:	b508      	push	{r3, lr}
   d5862:	4b02      	ldr	r3, [pc, #8]	; (d586c <HAL_USB_USART_Available_Data+0xc>)
   d5864:	681b      	ldr	r3, [r3, #0]
   d5866:	691b      	ldr	r3, [r3, #16]
   d5868:	9301      	str	r3, [sp, #4]
   d586a:	bd08      	pop	{r3, pc}
   d586c:	0003024c 	.word	0x0003024c

000d5870 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5870:	b508      	push	{r3, lr}
   d5872:	4b02      	ldr	r3, [pc, #8]	; (d587c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5874:	681b      	ldr	r3, [r3, #0]
   d5876:	695b      	ldr	r3, [r3, #20]
   d5878:	9301      	str	r3, [sp, #4]
   d587a:	bd08      	pop	{r3, pc}
   d587c:	0003024c 	.word	0x0003024c

000d5880 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5880:	b508      	push	{r3, lr}
   d5882:	4b02      	ldr	r3, [pc, #8]	; (d588c <HAL_USB_USART_Receive_Data+0xc>)
   d5884:	681b      	ldr	r3, [r3, #0]
   d5886:	699b      	ldr	r3, [r3, #24]
   d5888:	9301      	str	r3, [sp, #4]
   d588a:	bd08      	pop	{r3, pc}
   d588c:	0003024c 	.word	0x0003024c

000d5890 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5890:	b508      	push	{r3, lr}
   d5892:	4b02      	ldr	r3, [pc, #8]	; (d589c <HAL_USB_USART_Send_Data+0xc>)
   d5894:	681b      	ldr	r3, [r3, #0]
   d5896:	69db      	ldr	r3, [r3, #28]
   d5898:	9301      	str	r3, [sp, #4]
   d589a:	bd08      	pop	{r3, pc}
   d589c:	0003024c 	.word	0x0003024c

000d58a0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d58a0:	b508      	push	{r3, lr}
   d58a2:	4b02      	ldr	r3, [pc, #8]	; (d58ac <HAL_USB_USART_Flush_Data+0xc>)
   d58a4:	681b      	ldr	r3, [r3, #0]
   d58a6:	6a1b      	ldr	r3, [r3, #32]
   d58a8:	9301      	str	r3, [sp, #4]
   d58aa:	bd08      	pop	{r3, pc}
   d58ac:	0003024c 	.word	0x0003024c

000d58b0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d58b0:	b508      	push	{r3, lr}
   d58b2:	4b02      	ldr	r3, [pc, #8]	; (d58bc <panic_+0xc>)
   d58b4:	681b      	ldr	r3, [r3, #0]
   d58b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d58b8:	9301      	str	r3, [sp, #4]
   d58ba:	bd08      	pop	{r3, pc}
   d58bc:	00030260 	.word	0x00030260

000d58c0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d58c0:	b508      	push	{r3, lr}
   d58c2:	4b02      	ldr	r3, [pc, #8]	; (d58cc <set_system_mode+0xc>)
   d58c4:	681b      	ldr	r3, [r3, #0]
   d58c6:	685b      	ldr	r3, [r3, #4]
   d58c8:	9301      	str	r3, [sp, #4]
   d58ca:	bd08      	pop	{r3, pc}
   d58cc:	00030220 	.word	0x00030220

000d58d0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d58d0:	b508      	push	{r3, lr}
   d58d2:	4b02      	ldr	r3, [pc, #8]	; (d58dc <system_delay_ms+0xc>)
   d58d4:	681b      	ldr	r3, [r3, #0]
   d58d6:	695b      	ldr	r3, [r3, #20]
   d58d8:	9301      	str	r3, [sp, #4]
   d58da:	bd08      	pop	{r3, pc}
   d58dc:	00030220 	.word	0x00030220

000d58e0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d58e0:	b508      	push	{r3, lr}
   d58e2:	4b02      	ldr	r3, [pc, #8]	; (d58ec <system_thread_set_state+0xc>)
   d58e4:	681b      	ldr	r3, [r3, #0]
   d58e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d58e8:	9301      	str	r3, [sp, #4]
   d58ea:	bd08      	pop	{r3, pc}
   d58ec:	00030220 	.word	0x00030220

000d58f0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d58f0:	b508      	push	{r3, lr}
   d58f2:	4b03      	ldr	r3, [pc, #12]	; (d5900 <system_ctrl_set_app_request_handler+0x10>)
   d58f4:	681b      	ldr	r3, [r3, #0]
   d58f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d58fa:	9301      	str	r3, [sp, #4]
   d58fc:	bd08      	pop	{r3, pc}
   d58fe:	0000      	.short	0x0000
   d5900:	00030220 	.word	0x00030220

000d5904 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5904:	b508      	push	{r3, lr}
   d5906:	4b03      	ldr	r3, [pc, #12]	; (d5914 <system_ctrl_set_result+0x10>)
   d5908:	681b      	ldr	r3, [r3, #0]
   d590a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d590e:	9301      	str	r3, [sp, #4]
   d5910:	bd08      	pop	{r3, pc}
   d5912:	0000      	.short	0x0000
   d5914:	00030220 	.word	0x00030220

000d5918 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5918:	b508      	push	{r3, lr}
   d591a:	4b02      	ldr	r3, [pc, #8]	; (d5924 <network_connect+0xc>)
   d591c:	681b      	ldr	r3, [r3, #0]
   d591e:	685b      	ldr	r3, [r3, #4]
   d5920:	9301      	str	r3, [sp, #4]
   d5922:	bd08      	pop	{r3, pc}
   d5924:	00030240 	.word	0x00030240

000d5928 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5928:	b508      	push	{r3, lr}
   d592a:	4b02      	ldr	r3, [pc, #8]	; (d5934 <network_connecting+0xc>)
   d592c:	681b      	ldr	r3, [r3, #0]
   d592e:	689b      	ldr	r3, [r3, #8]
   d5930:	9301      	str	r3, [sp, #4]
   d5932:	bd08      	pop	{r3, pc}
   d5934:	00030240 	.word	0x00030240

000d5938 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5938:	b508      	push	{r3, lr}
   d593a:	4b02      	ldr	r3, [pc, #8]	; (d5944 <network_disconnect+0xc>)
   d593c:	681b      	ldr	r3, [r3, #0]
   d593e:	68db      	ldr	r3, [r3, #12]
   d5940:	9301      	str	r3, [sp, #4]
   d5942:	bd08      	pop	{r3, pc}
   d5944:	00030240 	.word	0x00030240

000d5948 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5948:	b508      	push	{r3, lr}
   d594a:	4b02      	ldr	r3, [pc, #8]	; (d5954 <network_ready+0xc>)
   d594c:	681b      	ldr	r3, [r3, #0]
   d594e:	691b      	ldr	r3, [r3, #16]
   d5950:	9301      	str	r3, [sp, #4]
   d5952:	bd08      	pop	{r3, pc}
   d5954:	00030240 	.word	0x00030240

000d5958 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5958:	b508      	push	{r3, lr}
   d595a:	4b02      	ldr	r3, [pc, #8]	; (d5964 <network_on+0xc>)
   d595c:	681b      	ldr	r3, [r3, #0]
   d595e:	695b      	ldr	r3, [r3, #20]
   d5960:	9301      	str	r3, [sp, #4]
   d5962:	bd08      	pop	{r3, pc}
   d5964:	00030240 	.word	0x00030240

000d5968 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5968:	b508      	push	{r3, lr}
   d596a:	4b02      	ldr	r3, [pc, #8]	; (d5974 <network_off+0xc>)
   d596c:	681b      	ldr	r3, [r3, #0]
   d596e:	699b      	ldr	r3, [r3, #24]
   d5970:	9301      	str	r3, [sp, #4]
   d5972:	bd08      	pop	{r3, pc}
   d5974:	00030240 	.word	0x00030240

000d5978 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5978:	b508      	push	{r3, lr}
   d597a:	4b02      	ldr	r3, [pc, #8]	; (d5984 <network_listen+0xc>)
   d597c:	681b      	ldr	r3, [r3, #0]
   d597e:	69db      	ldr	r3, [r3, #28]
   d5980:	9301      	str	r3, [sp, #4]
   d5982:	bd08      	pop	{r3, pc}
   d5984:	00030240 	.word	0x00030240

000d5988 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5988:	b508      	push	{r3, lr}
   d598a:	4b02      	ldr	r3, [pc, #8]	; (d5994 <network_listening+0xc>)
   d598c:	681b      	ldr	r3, [r3, #0]
   d598e:	6a1b      	ldr	r3, [r3, #32]
   d5990:	9301      	str	r3, [sp, #4]
   d5992:	bd08      	pop	{r3, pc}
   d5994:	00030240 	.word	0x00030240

000d5998 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5998:	b508      	push	{r3, lr}
   d599a:	4b02      	ldr	r3, [pc, #8]	; (d59a4 <network_set_listen_timeout+0xc>)
   d599c:	681b      	ldr	r3, [r3, #0]
   d599e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d59a0:	9301      	str	r3, [sp, #4]
   d59a2:	bd08      	pop	{r3, pc}
   d59a4:	00030240 	.word	0x00030240

000d59a8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d59a8:	b508      	push	{r3, lr}
   d59aa:	4b02      	ldr	r3, [pc, #8]	; (d59b4 <network_get_listen_timeout+0xc>)
   d59ac:	681b      	ldr	r3, [r3, #0]
   d59ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d59b0:	9301      	str	r3, [sp, #4]
   d59b2:	bd08      	pop	{r3, pc}
   d59b4:	00030240 	.word	0x00030240

000d59b8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d59b8:	b508      	push	{r3, lr}
   d59ba:	4b02      	ldr	r3, [pc, #8]	; (d59c4 <network_is_on+0xc>)
   d59bc:	681b      	ldr	r3, [r3, #0]
   d59be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d59c0:	9301      	str	r3, [sp, #4]
   d59c2:	bd08      	pop	{r3, pc}
   d59c4:	00030240 	.word	0x00030240

000d59c8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d59c8:	b508      	push	{r3, lr}
   d59ca:	4b02      	ldr	r3, [pc, #8]	; (d59d4 <network_is_off+0xc>)
   d59cc:	681b      	ldr	r3, [r3, #0]
   d59ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d59d0:	9301      	str	r3, [sp, #4]
   d59d2:	bd08      	pop	{r3, pc}
   d59d4:	00030240 	.word	0x00030240

000d59d8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d59d8:	b508      	push	{r3, lr}
   d59da:	4b02      	ldr	r3, [pc, #8]	; (d59e4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d59dc:	681b      	ldr	r3, [r3, #0]
   d59de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d59e0:	9301      	str	r3, [sp, #4]
   d59e2:	bd08      	pop	{r3, pc}
   d59e4:	00030244 	.word	0x00030244

000d59e8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d59e8:	b508      	push	{r3, lr}
   d59ea:	4b02      	ldr	r3, [pc, #8]	; (d59f4 <malloc+0xc>)
   d59ec:	681b      	ldr	r3, [r3, #0]
   d59ee:	681b      	ldr	r3, [r3, #0]
   d59f0:	9301      	str	r3, [sp, #4]
   d59f2:	bd08      	pop	{r3, pc}
   d59f4:	0003021c 	.word	0x0003021c

000d59f8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d59f8:	b508      	push	{r3, lr}
   d59fa:	4b02      	ldr	r3, [pc, #8]	; (d5a04 <free+0xc>)
   d59fc:	681b      	ldr	r3, [r3, #0]
   d59fe:	685b      	ldr	r3, [r3, #4]
   d5a00:	9301      	str	r3, [sp, #4]
   d5a02:	bd08      	pop	{r3, pc}
   d5a04:	0003021c 	.word	0x0003021c

000d5a08 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5a08:	b508      	push	{r3, lr}
   d5a0a:	4b02      	ldr	r3, [pc, #8]	; (d5a14 <vsnprintf+0xc>)
   d5a0c:	681b      	ldr	r3, [r3, #0]
   d5a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5a10:	9301      	str	r3, [sp, #4]
   d5a12:	bd08      	pop	{r3, pc}
   d5a14:	0003021c 	.word	0x0003021c

000d5a18 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5a18:	b508      	push	{r3, lr}
   d5a1a:	4b02      	ldr	r3, [pc, #8]	; (d5a24 <newlib_impure_ptr_callback+0xc>)
   d5a1c:	681b      	ldr	r3, [r3, #0]
   d5a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5a20:	9301      	str	r3, [sp, #4]
   d5a22:	bd08      	pop	{r3, pc}
   d5a24:	0003021c 	.word	0x0003021c

000d5a28 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5a28:	2200      	movs	r2, #0
   d5a2a:	6840      	ldr	r0, [r0, #4]
   d5a2c:	4611      	mov	r1, r2
   d5a2e:	f7ff bfab 	b.w	d5988 <network_listening>

000d5a32 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5a32:	2200      	movs	r2, #0
   d5a34:	6840      	ldr	r0, [r0, #4]
   d5a36:	4611      	mov	r1, r2
   d5a38:	f7ff bfb6 	b.w	d59a8 <network_get_listen_timeout>

000d5a3c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5a3c:	6840      	ldr	r0, [r0, #4]
   d5a3e:	2200      	movs	r2, #0
   d5a40:	f7ff bfaa 	b.w	d5998 <network_set_listen_timeout>

000d5a44 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5a44:	6840      	ldr	r0, [r0, #4]
   d5a46:	2200      	movs	r2, #0
   d5a48:	f081 0101 	eor.w	r1, r1, #1
   d5a4c:	f7ff bf94 	b.w	d5978 <network_listen>

000d5a50 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5a50:	2300      	movs	r3, #0
   d5a52:	6840      	ldr	r0, [r0, #4]
   d5a54:	461a      	mov	r2, r3
   d5a56:	4619      	mov	r1, r3
   d5a58:	f7ff bf86 	b.w	d5968 <network_off>

000d5a5c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5a5c:	2300      	movs	r3, #0
   d5a5e:	6840      	ldr	r0, [r0, #4]
   d5a60:	461a      	mov	r2, r3
   d5a62:	4619      	mov	r1, r3
   d5a64:	f7ff bf78 	b.w	d5958 <network_on>

000d5a68 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5a68:	2200      	movs	r2, #0
   d5a6a:	6840      	ldr	r0, [r0, #4]
   d5a6c:	4611      	mov	r1, r2
   d5a6e:	f7ff bf6b 	b.w	d5948 <network_ready>

000d5a72 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5a72:	2200      	movs	r2, #0
   d5a74:	6840      	ldr	r0, [r0, #4]
   d5a76:	4611      	mov	r1, r2
   d5a78:	f7ff bf56 	b.w	d5928 <network_connecting>

000d5a7c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5a7c:	6840      	ldr	r0, [r0, #4]
   d5a7e:	2200      	movs	r2, #0
   d5a80:	2102      	movs	r1, #2
   d5a82:	f7ff bf59 	b.w	d5938 <network_disconnect>

000d5a86 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5a86:	2300      	movs	r3, #0
   d5a88:	6840      	ldr	r0, [r0, #4]
   d5a8a:	461a      	mov	r2, r3
   d5a8c:	f7ff bf44 	b.w	d5918 <network_connect>

000d5a90 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5a90:	4b02      	ldr	r3, [pc, #8]	; (d5a9c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5a92:	2203      	movs	r2, #3
   d5a94:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5a96:	4a02      	ldr	r2, [pc, #8]	; (d5aa0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5a98:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5a9a:	4770      	bx	lr
   d5a9c:	2003e650 	.word	0x2003e650
   d5aa0:	000d72d0 	.word	0x000d72d0

000d5aa4 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d5aa4:	2100      	movs	r1, #0
   d5aa6:	f7ff bebb 	b.w	d5820 <hal_spi_acquire>

000d5aaa <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d5aaa:	2100      	movs	r1, #0
   d5aac:	f7ff bec0 	b.w	d5830 <hal_spi_release>

000d5ab0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5ab0:	b510      	push	{r4, lr}
   d5ab2:	4604      	mov	r4, r0
   d5ab4:	4608      	mov	r0, r1
{
    _spi = spi;
   d5ab6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5ab8:	f7ff fe92 	bl	d57e0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5abc:	2300      	movs	r3, #0
   d5abe:	6063      	str	r3, [r4, #4]
}
   d5ac0:	4620      	mov	r0, r4
   d5ac2:	bd10      	pop	{r4, pc}

000d5ac4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5ac4:	b510      	push	{r4, lr}
   d5ac6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5ac8:	7800      	ldrb	r0, [r0, #0]
   d5aca:	f7ff ffeb 	bl	d5aa4 <_ZN8SPIClass4lockEv.isra.0>
   d5ace:	b948      	cbnz	r0, d5ae4 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d5ad0:	7820      	ldrb	r0, [r4, #0]
   d5ad2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5ad6:	f7ff fe73 	bl	d57c0 <hal_spi_begin>
        unlock();
   d5ada:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5ae0:	f7ff bfe3 	b.w	d5aaa <_ZN8SPIClass6unlockEv.isra.0>
}
   d5ae4:	bd10      	pop	{r4, pc}

000d5ae6 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d5ae6:	7800      	ldrb	r0, [r0, #0]
   d5ae8:	f7ff bfdf 	b.w	d5aaa <_ZN8SPIClass6unlockEv.isra.0>

000d5aec <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5aec:	0840      	lsrs	r0, r0, #1
{
   d5aee:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d5af0:	6018      	str	r0, [r3, #0]
   d5af2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5af4:	6818      	ldr	r0, [r3, #0]
   d5af6:	4288      	cmp	r0, r1
   d5af8:	b2e5      	uxtb	r5, r4
   d5afa:	d906      	bls.n	d5b0a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5afc:	3401      	adds	r4, #1
   d5afe:	2c08      	cmp	r4, #8
   d5b00:	d002      	beq.n	d5b08 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5b02:	0840      	lsrs	r0, r0, #1
   d5b04:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d5b06:	e7f5      	b.n	d5af4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5b08:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d5b0a:	4b02      	ldr	r3, [pc, #8]	; (d5b14 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5b0c:	5d5b      	ldrb	r3, [r3, r5]
   d5b0e:	7013      	strb	r3, [r2, #0]
}
   d5b10:	bd30      	pop	{r4, r5, pc}
   d5b12:	bf00      	nop
   d5b14:	000d7304 	.word	0x000d7304

000d5b18 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d5b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5b1c:	4606      	mov	r6, r0
   d5b1e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d5b20:	7800      	ldrb	r0, [r0, #0]
{
   d5b22:	460c      	mov	r4, r1
    CHECK(lock());
   d5b24:	f7ff ffbe 	bl	d5aa4 <_ZN8SPIClass4lockEv.isra.0>
   d5b28:	2800      	cmp	r0, #0
   d5b2a:	db1b      	blt.n	d5b64 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d5b2c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d5b2e:	2214      	movs	r2, #20
   d5b30:	2100      	movs	r1, #0
   d5b32:	a809      	add	r0, sp, #36	; 0x24
   d5b34:	f000 fdce 	bl	d66d4 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5b38:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d5b3a:	2200      	movs	r2, #0
   d5b3c:	a909      	add	r1, sp, #36	; 0x24
   d5b3e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d5b40:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d5b44:	f7ff fe5c 	bl	d5800 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d5b48:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d5b4c:	b113      	cbz	r3, d5b54 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d5b4e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d5b52:	b155      	cbz	r5, d5b6a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d5b54:	2700      	movs	r7, #0
   d5b56:	46b9      	mov	r9, r7
   d5b58:	46b8      	mov	r8, r7
   d5b5a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d5b5c:	7923      	ldrb	r3, [r4, #4]
   d5b5e:	b15d      	cbz	r5, d5b78 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d5b60:	b1c3      	cbz	r3, d5b94 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d5b62:	2000      	movs	r0, #0
}
   d5b64:	b00f      	add	sp, #60	; 0x3c
   d5b66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d5b6a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d5b6e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d5b72:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d5b76:	e7f1      	b.n	d5b5c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d5b78:	2b00      	cmp	r3, #0
   d5b7a:	d135      	bne.n	d5be8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d5b7c:	68a3      	ldr	r3, [r4, #8]
   d5b7e:	4543      	cmp	r3, r8
   d5b80:	d108      	bne.n	d5b94 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d5b82:	f88d 9020 	strb.w	r9, [sp, #32]
   d5b86:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d5b8a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5b8e:	89a3      	ldrh	r3, [r4, #12]
   d5b90:	429a      	cmp	r2, r3
   d5b92:	d0e6      	beq.n	d5b62 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d5b94:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d5b96:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d5b98:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d5b9c:	980a      	ldr	r0, [sp, #40]	; 0x28
   d5b9e:	ab04      	add	r3, sp, #16
   d5ba0:	f10d 020f 	add.w	r2, sp, #15
   d5ba4:	f7ff ffa2 	bl	d5aec <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d5ba8:	7921      	ldrb	r1, [r4, #4]
   d5baa:	b985      	cbnz	r5, d5bce <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d5bac:	b989      	cbnz	r1, d5bd2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d5bae:	68a3      	ldr	r3, [r4, #8]
   d5bb0:	4543      	cmp	r3, r8
   d5bb2:	d30e      	bcc.n	d5bd2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d5bb4:	f88d 9020 	strb.w	r9, [sp, #32]
   d5bb8:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d5bbc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5bc0:	89a3      	ldrh	r3, [r4, #12]
   d5bc2:	429a      	cmp	r2, r3
   d5bc4:	d105      	bne.n	d5bd2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d5bc6:	9b04      	ldr	r3, [sp, #16]
   d5bc8:	4543      	cmp	r3, r8
   d5bca:	d102      	bne.n	d5bd2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d5bcc:	e7c9      	b.n	d5b62 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d5bce:	2900      	cmp	r1, #0
   d5bd0:	d1f9      	bne.n	d5bc6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d5bd2:	2300      	movs	r3, #0
   d5bd4:	9301      	str	r3, [sp, #4]
   d5bd6:	7b63      	ldrb	r3, [r4, #13]
   d5bd8:	9300      	str	r3, [sp, #0]
   d5bda:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d5bde:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d5be0:	7830      	ldrb	r0, [r6, #0]
   d5be2:	f7ff fe15 	bl	d5810 <hal_spi_set_settings>
   d5be6:	e7bc      	b.n	d5b62 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d5be8:	e9cd 5500 	strd	r5, r5, [sp]
   d5bec:	462b      	mov	r3, r5
   d5bee:	462a      	mov	r2, r5
   d5bf0:	2101      	movs	r1, #1
   d5bf2:	e7f5      	b.n	d5be0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d5bf4 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5bf4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d5bf6:	7800      	ldrb	r0, [r0, #0]
   d5bf8:	f7ff fdea 	bl	d57d0 <hal_spi_transfer>
}
   d5bfc:	b2c0      	uxtb	r0, r0
   d5bfe:	bd08      	pop	{r3, pc}

000d5c00 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5c00:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5c02:	4b09      	ldr	r3, [pc, #36]	; (d5c28 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5c04:	4c09      	ldr	r4, [pc, #36]	; (d5c2c <_GLOBAL__sub_I_System+0x2c>)
   d5c06:	2202      	movs	r2, #2
   d5c08:	2000      	movs	r0, #0
   d5c0a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5c0c:	4b08      	ldr	r3, [pc, #32]	; (d5c30 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5c0e:	6020      	str	r0, [r4, #0]
   d5c10:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5c12:	71a0      	strb	r0, [r4, #6]
   d5c14:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5c16:	f7ff fe53 	bl	d58c0 <set_system_mode>
SystemClass System;
   d5c1a:	4620      	mov	r0, r4
   d5c1c:	4a05      	ldr	r2, [pc, #20]	; (d5c34 <_GLOBAL__sub_I_System+0x34>)
   d5c1e:	4906      	ldr	r1, [pc, #24]	; (d5c38 <_GLOBAL__sub_I_System+0x38>)
   d5c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5c24:	f000 bd30 	b.w	d6688 <__aeabi_atexit>
   d5c28:	2003e664 	.word	0x2003e664
   d5c2c:	2003e658 	.word	0x2003e658
   d5c30:	ffff0000 	.word	0xffff0000
   d5c34:	2003e5bc 	.word	0x2003e5bc
   d5c38:	000d40c1 	.word	0x000d40c1

000d5c3c <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5c3c:	b510      	push	{r4, lr}
   d5c3e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5c40:	6800      	ldr	r0, [r0, #0]
   d5c42:	b108      	cbz	r0, d5c48 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5c44:	f7ff fd14 	bl	d5670 <os_mutex_recursive_destroy>
    }
   d5c48:	4620      	mov	r0, r4
   d5c4a:	bd10      	pop	{r4, pc}

000d5c4c <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5c4c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5c4e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5c50:	4604      	mov	r4, r0
      if (_M_manager)
   d5c52:	b113      	cbz	r3, d5c5a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5c54:	2203      	movs	r2, #3
   d5c56:	4601      	mov	r1, r0
   d5c58:	4798      	blx	r3
    }
   d5c5a:	4620      	mov	r0, r4
   d5c5c:	bd10      	pop	{r4, pc}
	...

000d5c60 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d5c60:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d5c62:	4c06      	ldr	r4, [pc, #24]	; (d5c7c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5c64:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d5c66:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5c68:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5c6a:	f7ff fcf9 	bl	d5660 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5c6e:	4620      	mov	r0, r4
   d5c70:	4a03      	ldr	r2, [pc, #12]	; (d5c80 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5c72:	4904      	ldr	r1, [pc, #16]	; (d5c84 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5c78:	f000 bd06 	b.w	d6688 <__aeabi_atexit>
   d5c7c:	2003e668 	.word	0x2003e668
   d5c80:	2003e5bc 	.word	0x2003e5bc
   d5c84:	000d5c3d 	.word	0x000d5c3d

000d5c88 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c8a:	4606      	mov	r6, r0
   d5c8c:	460d      	mov	r5, r1
  size_t n = 0;
   d5c8e:	188f      	adds	r7, r1, r2
   d5c90:	2400      	movs	r4, #0
  while (size--) {
   d5c92:	42bd      	cmp	r5, r7
   d5c94:	d00c      	beq.n	d5cb0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5c96:	6833      	ldr	r3, [r6, #0]
   d5c98:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5c9c:	689b      	ldr	r3, [r3, #8]
   d5c9e:	4630      	mov	r0, r6
   d5ca0:	4798      	blx	r3
     if (chunk>=0)
   d5ca2:	1e03      	subs	r3, r0, #0
   d5ca4:	db01      	blt.n	d5caa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5ca6:	441c      	add	r4, r3
  while (size--) {
   d5ca8:	e7f3      	b.n	d5c92 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5caa:	2c00      	cmp	r4, #0
   d5cac:	bf08      	it	eq
   d5cae:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5cb0:	4620      	mov	r0, r4
   d5cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5cb4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5cb4:	b513      	push	{r0, r1, r4, lr}
   d5cb6:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5cb8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5cba:	b159      	cbz	r1, d5cd4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5cbc:	9101      	str	r1, [sp, #4]
   d5cbe:	f000 fd35 	bl	d672c <strlen>
   d5cc2:	6823      	ldr	r3, [r4, #0]
   d5cc4:	9901      	ldr	r1, [sp, #4]
   d5cc6:	68db      	ldr	r3, [r3, #12]
   d5cc8:	4602      	mov	r2, r0
   d5cca:	4620      	mov	r0, r4
    }
   d5ccc:	b002      	add	sp, #8
   d5cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5cd2:	4718      	bx	r3
    }
   d5cd4:	b002      	add	sp, #8
   d5cd6:	bd10      	pop	{r4, pc}

000d5cd8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d5cd8:	b508      	push	{r3, lr}
  return write(str);
   d5cda:	f7ff ffeb 	bl	d5cb4 <_ZN5Print5writeEPKc>
}
   d5cde:	bd08      	pop	{r3, pc}

000d5ce0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d5ce0:	6803      	ldr	r3, [r0, #0]
   d5ce2:	689b      	ldr	r3, [r3, #8]
   d5ce4:	4718      	bx	r3

000d5ce6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5ce6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5ce8:	210d      	movs	r1, #13
{
   d5cea:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5cec:	f7ff fff8 	bl	d5ce0 <_ZN5Print5printEc>
  n += print('\n');
   d5cf0:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5cf2:	4604      	mov	r4, r0
  n += print('\n');
   d5cf4:	4628      	mov	r0, r5
   d5cf6:	f7ff fff3 	bl	d5ce0 <_ZN5Print5printEc>
  return n;
}
   d5cfa:	4420      	add	r0, r4
   d5cfc:	bd38      	pop	{r3, r4, r5, pc}

000d5cfe <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5cfe:	b538      	push	{r3, r4, r5, lr}
   d5d00:	4605      	mov	r5, r0
  return write(str);
   d5d02:	f7ff ffd7 	bl	d5cb4 <_ZN5Print5writeEPKc>
   d5d06:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d5d08:	4628      	mov	r0, r5
   d5d0a:	f7ff ffec 	bl	d5ce6 <_ZN5Print7printlnEv>
  return n;
}
   d5d0e:	4420      	add	r0, r4
   d5d10:	bd38      	pop	{r3, r4, r5, pc}

000d5d12 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5d12:	b530      	push	{r4, r5, lr}
   d5d14:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5d16:	2300      	movs	r3, #0
   d5d18:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5d1c:	2a01      	cmp	r2, #1
   d5d1e:	bf98      	it	ls
   d5d20:	220a      	movls	r2, #10
   d5d22:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5d24:	460d      	mov	r5, r1
   d5d26:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5d2a:	fb01 5312 	mls	r3, r1, r2, r5
   d5d2e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5d32:	2b09      	cmp	r3, #9
   d5d34:	bf94      	ite	ls
   d5d36:	3330      	addls	r3, #48	; 0x30
   d5d38:	3337      	addhi	r3, #55	; 0x37
   d5d3a:	b2db      	uxtb	r3, r3
  } while(n);
   d5d3c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5d3e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5d42:	d9ef      	bls.n	d5d24 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5d44:	4621      	mov	r1, r4
   d5d46:	f7ff ffb5 	bl	d5cb4 <_ZN5Print5writeEPKc>
}
   d5d4a:	b00b      	add	sp, #44	; 0x2c
   d5d4c:	bd30      	pop	{r4, r5, pc}

000d5d4e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d5d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5d52:	b086      	sub	sp, #24
   d5d54:	af00      	add	r7, sp, #0
   d5d56:	4605      	mov	r5, r0
   d5d58:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d5d5a:	1d38      	adds	r0, r7, #4
   d5d5c:	2114      	movs	r1, #20
{
   d5d5e:	4614      	mov	r4, r2
    va_copy(args2, args);
   d5d60:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d5d62:	f7ff fe51 	bl	d5a08 <vsnprintf>

    if (n<bufsize)
   d5d66:	2813      	cmp	r0, #19
   d5d68:	d80e      	bhi.n	d5d88 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d5d6a:	1d39      	adds	r1, r7, #4
   d5d6c:	4628      	mov	r0, r5
   d5d6e:	f7ff ffa1 	bl	d5cb4 <_ZN5Print5writeEPKc>
   d5d72:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d5d74:	b11e      	cbz	r6, d5d7e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d5d76:	4628      	mov	r0, r5
   d5d78:	f7ff ffb5 	bl	d5ce6 <_ZN5Print7printlnEv>
   d5d7c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d5d7e:	4620      	mov	r0, r4
   d5d80:	3718      	adds	r7, #24
   d5d82:	46bd      	mov	sp, r7
   d5d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5d88:	f100 0308 	add.w	r3, r0, #8
   d5d8c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d5d90:	46e8      	mov	r8, sp
        char bigger[n+1];
   d5d92:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d5d96:	4622      	mov	r2, r4
   d5d98:	1c41      	adds	r1, r0, #1
   d5d9a:	683b      	ldr	r3, [r7, #0]
   d5d9c:	4668      	mov	r0, sp
   d5d9e:	f7ff fe33 	bl	d5a08 <vsnprintf>
  return write(str);
   d5da2:	4669      	mov	r1, sp
   d5da4:	4628      	mov	r0, r5
   d5da6:	f7ff ff85 	bl	d5cb4 <_ZN5Print5writeEPKc>
   d5daa:	4604      	mov	r4, r0
   d5dac:	46c5      	mov	sp, r8
   d5dae:	e7e1      	b.n	d5d74 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d5db0 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5db0:	2300      	movs	r3, #0
   d5db2:	6840      	ldr	r0, [r0, #4]
   d5db4:	461a      	mov	r2, r3
   d5db6:	4619      	mov	r1, r3
   d5db8:	f7ff bdce 	b.w	d5958 <network_on>

000d5dbc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5dbc:	4b01      	ldr	r3, [pc, #4]	; (d5dc4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5dbe:	4a02      	ldr	r2, [pc, #8]	; (d5dc8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5dc0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5dc2:	4770      	bx	lr
   d5dc4:	2003e66c 	.word	0x2003e66c
   d5dc8:	000d730c 	.word	0x000d730c

000d5dcc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5dcc:	4b02      	ldr	r3, [pc, #8]	; (d5dd8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5dce:	681a      	ldr	r2, [r3, #0]
   d5dd0:	4b02      	ldr	r3, [pc, #8]	; (d5ddc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5dd2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5dd4:	4770      	bx	lr
   d5dd6:	bf00      	nop
   d5dd8:	2003e554 	.word	0x2003e554
   d5ddc:	2003e670 	.word	0x2003e670

000d5de0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5de0:	2100      	movs	r1, #0
   d5de2:	f7ff bd75 	b.w	d58d0 <system_delay_ms>

000d5de6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5de6:	b510      	push	{r4, lr}
   d5de8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5dea:	f7ff ff2f 	bl	d5c4c <_ZNSt14_Function_baseD1Ev>
   d5dee:	4620      	mov	r0, r4
   d5df0:	bd10      	pop	{r4, pc}
	...

000d5df4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5df4:	4803      	ldr	r0, [pc, #12]	; (d5e04 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5df6:	4a04      	ldr	r2, [pc, #16]	; (d5e08 <_GLOBAL__sub_I_RGB+0x14>)
   d5df8:	4904      	ldr	r1, [pc, #16]	; (d5e0c <_GLOBAL__sub_I_RGB+0x18>)
   d5dfa:	2300      	movs	r3, #0
   d5dfc:	6083      	str	r3, [r0, #8]
   d5dfe:	f000 bc43 	b.w	d6688 <__aeabi_atexit>
   d5e02:	bf00      	nop
   d5e04:	2003e674 	.word	0x2003e674
   d5e08:	2003e5bc 	.word	0x2003e5bc
   d5e0c:	000d5de7 	.word	0x000d5de7

000d5e10 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5e10:	4b01      	ldr	r3, [pc, #4]	; (d5e18 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5e12:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5e14:	4770      	bx	lr
   d5e16:	bf00      	nop
   d5e18:	2003e558 	.word	0x2003e558

000d5e1c <serialEventRun>:
{
   d5e1c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5e1e:	4b0b      	ldr	r3, [pc, #44]	; (d5e4c <serialEventRun+0x30>)
   d5e20:	b143      	cbz	r3, d5e34 <serialEventRun+0x18>
   d5e22:	f000 f95b 	bl	d60dc <_Z16_fetch_usbserialv>
   d5e26:	6803      	ldr	r3, [r0, #0]
   d5e28:	691b      	ldr	r3, [r3, #16]
   d5e2a:	4798      	blx	r3
   d5e2c:	2800      	cmp	r0, #0
   d5e2e:	dd01      	ble.n	d5e34 <serialEventRun+0x18>
        serialEvent();
   d5e30:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5e34:	4b06      	ldr	r3, [pc, #24]	; (d5e50 <serialEventRun+0x34>)
   d5e36:	b143      	cbz	r3, d5e4a <serialEventRun+0x2e>
   d5e38:	f000 f9fc 	bl	d6234 <_Z22__fetch_global_Serial1v>
   d5e3c:	6803      	ldr	r3, [r0, #0]
   d5e3e:	691b      	ldr	r3, [r3, #16]
   d5e40:	4798      	blx	r3
   d5e42:	2800      	cmp	r0, #0
   d5e44:	dd01      	ble.n	d5e4a <serialEventRun+0x2e>
        serialEvent1();
   d5e46:	f3af 8000 	nop.w
}
   d5e4a:	bd08      	pop	{r3, pc}
	...

000d5e54 <_post_loop>:
{
   d5e54:	b508      	push	{r3, lr}
	serialEventRun();
   d5e56:	f7ff ffe1 	bl	d5e1c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5e5a:	f7ff fbe9 	bl	d5630 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5e5e:	4b01      	ldr	r3, [pc, #4]	; (d5e64 <_post_loop+0x10>)
   d5e60:	6018      	str	r0, [r3, #0]
}
   d5e62:	bd08      	pop	{r3, pc}
   d5e64:	2003e7d4 	.word	0x2003e7d4

000d5e68 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5e68:	4802      	ldr	r0, [pc, #8]	; (d5e74 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5e6a:	4a03      	ldr	r2, [pc, #12]	; (d5e78 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5e6c:	4903      	ldr	r1, [pc, #12]	; (d5e7c <_Z33system_initialize_user_backup_ramv+0x14>)
   d5e6e:	1a12      	subs	r2, r2, r0
   d5e70:	f000 bc22 	b.w	d66b8 <memcpy>
   d5e74:	2003f400 	.word	0x2003f400
   d5e78:	2003f404 	.word	0x2003f404
   d5e7c:	000d7470 	.word	0x000d7470

000d5e80 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5e80:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5e82:	2300      	movs	r3, #0
   d5e84:	9300      	str	r3, [sp, #0]
   d5e86:	461a      	mov	r2, r3
   d5e88:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5e8c:	f7ff fd3a 	bl	d5904 <system_ctrl_set_result>
}
   d5e90:	b003      	add	sp, #12
   d5e92:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5e98 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5e98:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5e9a:	8843      	ldrh	r3, [r0, #2]
   d5e9c:	2b0a      	cmp	r3, #10
   d5e9e:	d008      	beq.n	d5eb2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5ea0:	2b50      	cmp	r3, #80	; 0x50
   d5ea2:	d10b      	bne.n	d5ebc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5ea4:	4b09      	ldr	r3, [pc, #36]	; (d5ecc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5ea6:	681b      	ldr	r3, [r3, #0]
   d5ea8:	b14b      	cbz	r3, d5ebe <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5eaa:	b003      	add	sp, #12
   d5eac:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5eb0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5eb2:	f7ff ffe5 	bl	d5e80 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5eb6:	b003      	add	sp, #12
   d5eb8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5ebc:	2300      	movs	r3, #0
   d5ebe:	9300      	str	r3, [sp, #0]
   d5ec0:	461a      	mov	r2, r3
   d5ec2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5ec6:	f7ff fd1d 	bl	d5904 <system_ctrl_set_result>
}
   d5eca:	e7f4      	b.n	d5eb6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5ecc:	2003e688 	.word	0x2003e688

000d5ed0 <module_user_init_hook>:
{
   d5ed0:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5ed2:	4c12      	ldr	r4, [pc, #72]	; (d5f1c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5ed4:	4812      	ldr	r0, [pc, #72]	; (d5f20 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5ed6:	4d13      	ldr	r5, [pc, #76]	; (d5f24 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5ed8:	2100      	movs	r1, #0
   d5eda:	f7ff fd9d 	bl	d5a18 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5ede:	6823      	ldr	r3, [r4, #0]
   d5ee0:	42ab      	cmp	r3, r5
   d5ee2:	4b11      	ldr	r3, [pc, #68]	; (d5f28 <module_user_init_hook+0x58>)
   d5ee4:	bf0c      	ite	eq
   d5ee6:	2201      	moveq	r2, #1
   d5ee8:	2200      	movne	r2, #0
   d5eea:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5eec:	d002      	beq.n	d5ef4 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d5eee:	f7ff ffbb 	bl	d5e68 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5ef2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5ef4:	f7ff fb8c 	bl	d5610 <HAL_RNG_GetRandomNumber>
   d5ef8:	4604      	mov	r4, r0
    srand(seed);
   d5efa:	f000 fbf3 	bl	d66e4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5efe:	4b0b      	ldr	r3, [pc, #44]	; (d5f2c <module_user_init_hook+0x5c>)
   d5f00:	b113      	cbz	r3, d5f08 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d5f02:	4620      	mov	r0, r4
   d5f04:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5f08:	2100      	movs	r1, #0
   d5f0a:	4808      	ldr	r0, [pc, #32]	; (d5f2c <module_user_init_hook+0x5c>)
   d5f0c:	f7ff fd64 	bl	d59d8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5f10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5f14:	4806      	ldr	r0, [pc, #24]	; (d5f30 <module_user_init_hook+0x60>)
   d5f16:	2100      	movs	r1, #0
   d5f18:	f7ff bcea 	b.w	d58f0 <system_ctrl_set_app_request_handler>
   d5f1c:	2003f400 	.word	0x2003f400
   d5f20:	000d5e11 	.word	0x000d5e11
   d5f24:	9a271c1e 	.word	0x9a271c1e
   d5f28:	2003e684 	.word	0x2003e684
   d5f2c:	00000000 	.word	0x00000000
   d5f30:	000d5e99 	.word	0x000d5e99

000d5f34 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5f34:	4770      	bx	lr

000d5f36 <_ZN9IPAddressD0Ev>:
   d5f36:	b510      	push	{r4, lr}
   d5f38:	2118      	movs	r1, #24
   d5f3a:	4604      	mov	r4, r0
   d5f3c:	f000 fba9 	bl	d6692 <_ZdlPvj>
   d5f40:	4620      	mov	r0, r4
   d5f42:	bd10      	pop	{r4, pc}

000d5f44 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5f44:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5f46:	7d03      	ldrb	r3, [r0, #20]
   d5f48:	2b06      	cmp	r3, #6
{
   d5f4a:	b08d      	sub	sp, #52	; 0x34
   d5f4c:	460e      	mov	r6, r1
   d5f4e:	f100 0704 	add.w	r7, r0, #4
   d5f52:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5f56:	d012      	beq.n	d5f7e <_ZNK9IPAddress7printToER5Print+0x3a>
   d5f58:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5f5c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5f60:	220a      	movs	r2, #10
   d5f62:	4630      	mov	r0, r6
   d5f64:	f7ff fed5 	bl	d5d12 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5f68:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5f6a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5f6c:	d019      	beq.n	d5fa2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5f6e:	2c00      	cmp	r4, #0
   d5f70:	d0f4      	beq.n	d5f5c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5f72:	212e      	movs	r1, #46	; 0x2e
   d5f74:	4630      	mov	r0, r6
   d5f76:	f7ff feb3 	bl	d5ce0 <_ZN5Print5printEc>
   d5f7a:	4404      	add	r4, r0
   d5f7c:	e7ee      	b.n	d5f5c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5f7e:	232f      	movs	r3, #47	; 0x2f
   d5f80:	466a      	mov	r2, sp
   d5f82:	4639      	mov	r1, r7
   d5f84:	200a      	movs	r0, #10
		buf[0] = 0;
   d5f86:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5f8a:	f7ff fb79 	bl	d5680 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5f8e:	4668      	mov	r0, sp
   d5f90:	f000 fbcc 	bl	d672c <strlen>
   d5f94:	6833      	ldr	r3, [r6, #0]
   d5f96:	4602      	mov	r2, r0
   d5f98:	68db      	ldr	r3, [r3, #12]
   d5f9a:	4669      	mov	r1, sp
   d5f9c:	4630      	mov	r0, r6
   d5f9e:	4798      	blx	r3
   d5fa0:	4604      	mov	r4, r0
    }
    return n;
}
   d5fa2:	4620      	mov	r0, r4
   d5fa4:	b00d      	add	sp, #52	; 0x34
   d5fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5fa8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5fa8:	b510      	push	{r4, lr}
   d5faa:	4b05      	ldr	r3, [pc, #20]	; (d5fc0 <_ZN9IPAddressC1Ev+0x18>)
   d5fac:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5fae:	2211      	movs	r2, #17
   d5fb0:	f840 3b04 	str.w	r3, [r0], #4
   d5fb4:	2100      	movs	r1, #0
   d5fb6:	f000 fb8d 	bl	d66d4 <memset>
}
   d5fba:	4620      	mov	r0, r4
   d5fbc:	bd10      	pop	{r4, pc}
   d5fbe:	bf00      	nop
   d5fc0:	000d7334 	.word	0x000d7334

000d5fc4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5fc4:	4603      	mov	r3, r0
   d5fc6:	4a07      	ldr	r2, [pc, #28]	; (d5fe4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5fc8:	b510      	push	{r4, lr}
   d5fca:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5fce:	f101 0210 	add.w	r2, r1, #16
   d5fd2:	f851 4b04 	ldr.w	r4, [r1], #4
   d5fd6:	f843 4b04 	str.w	r4, [r3], #4
   d5fda:	4291      	cmp	r1, r2
   d5fdc:	d1f9      	bne.n	d5fd2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5fde:	780a      	ldrb	r2, [r1, #0]
   d5fe0:	701a      	strb	r2, [r3, #0]
}
   d5fe2:	bd10      	pop	{r4, pc}
   d5fe4:	000d7334 	.word	0x000d7334

000d5fe8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5fe8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5fea:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5fee:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5ff2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5ff6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5ffa:	2304      	movs	r3, #4
   d5ffc:	6041      	str	r1, [r0, #4]
   d5ffe:	7503      	strb	r3, [r0, #20]
}
   d6000:	bd10      	pop	{r4, pc}
	...

000d6004 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d6004:	b513      	push	{r0, r1, r4, lr}
   d6006:	4b05      	ldr	r3, [pc, #20]	; (d601c <_ZN9IPAddressC1EPKh+0x18>)
   d6008:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d600a:	78cb      	ldrb	r3, [r1, #3]
   d600c:	9300      	str	r3, [sp, #0]
   d600e:	788b      	ldrb	r3, [r1, #2]
   d6010:	784a      	ldrb	r2, [r1, #1]
   d6012:	7809      	ldrb	r1, [r1, #0]
   d6014:	f7ff ffe8 	bl	d5fe8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6018:	b002      	add	sp, #8
   d601a:	bd10      	pop	{r4, pc}
   d601c:	000d7334 	.word	0x000d7334

000d6020 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6020:	7441      	strb	r1, [r0, #17]
}
   d6022:	4770      	bx	lr

000d6024 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6024:	4770      	bx	lr

000d6026 <_ZN9USBSerial4readEv>:
{
   d6026:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6028:	2100      	movs	r1, #0
   d602a:	7c00      	ldrb	r0, [r0, #16]
   d602c:	f7ff fc28 	bl	d5880 <HAL_USB_USART_Receive_Data>
}
   d6030:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6034:	bd08      	pop	{r3, pc}

000d6036 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d6036:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6038:	2101      	movs	r1, #1
   d603a:	7c00      	ldrb	r0, [r0, #16]
   d603c:	f7ff fc20 	bl	d5880 <HAL_USB_USART_Receive_Data>
}
   d6040:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6044:	bd08      	pop	{r3, pc}

000d6046 <_ZN9USBSerial17availableForWriteEv>:
{
   d6046:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6048:	7c00      	ldrb	r0, [r0, #16]
   d604a:	f7ff fc11 	bl	d5870 <HAL_USB_USART_Available_Data_For_Write>
}
   d604e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6052:	bd08      	pop	{r3, pc}

000d6054 <_ZN9USBSerial9availableEv>:
{
   d6054:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6056:	7c00      	ldrb	r0, [r0, #16]
   d6058:	f7ff fc02 	bl	d5860 <HAL_USB_USART_Available_Data>
}
   d605c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6060:	bd08      	pop	{r3, pc}

000d6062 <_ZN9USBSerial5writeEh>:
{
   d6062:	b513      	push	{r0, r1, r4, lr}
   d6064:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6066:	7c00      	ldrb	r0, [r0, #16]
{
   d6068:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d606a:	f7ff fc01 	bl	d5870 <HAL_USB_USART_Available_Data_For_Write>
   d606e:	2800      	cmp	r0, #0
   d6070:	9901      	ldr	r1, [sp, #4]
   d6072:	dc01      	bgt.n	d6078 <_ZN9USBSerial5writeEh+0x16>
   d6074:	7c60      	ldrb	r0, [r4, #17]
   d6076:	b120      	cbz	r0, d6082 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6078:	7c20      	ldrb	r0, [r4, #16]
   d607a:	f7ff fc09 	bl	d5890 <HAL_USB_USART_Send_Data>
   d607e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d6082:	b002      	add	sp, #8
   d6084:	bd10      	pop	{r4, pc}

000d6086 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d6086:	7c00      	ldrb	r0, [r0, #16]
   d6088:	f7ff bc0a 	b.w	d58a0 <HAL_USB_USART_Flush_Data>

000d608c <_ZN9USBSerialD0Ev>:
   d608c:	b510      	push	{r4, lr}
   d608e:	2114      	movs	r1, #20
   d6090:	4604      	mov	r4, r0
   d6092:	f000 fafe 	bl	d6692 <_ZdlPvj>
   d6096:	4620      	mov	r0, r4
   d6098:	bd10      	pop	{r4, pc}
	...

000d609c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d609c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d609e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d60a2:	4604      	mov	r4, r0
   d60a4:	4608      	mov	r0, r1
   d60a6:	2100      	movs	r1, #0
   d60a8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d60ac:	4b04      	ldr	r3, [pc, #16]	; (d60c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d60ae:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d60b0:	2301      	movs	r3, #1
  _serial = serial;
   d60b2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d60b4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d60b6:	4611      	mov	r1, r2
   d60b8:	f7ff fbc2 	bl	d5840 <HAL_USB_USART_Init>
}
   d60bc:	4620      	mov	r0, r4
   d60be:	bd10      	pop	{r4, pc}
   d60c0:	000d7348 	.word	0x000d7348

000d60c4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d60c4:	7c00      	ldrb	r0, [r0, #16]
   d60c6:	2200      	movs	r2, #0
   d60c8:	f7ff bbc2 	b.w	d5850 <HAL_USB_USART_Begin>

000d60cc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d60cc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d60ce:	2214      	movs	r2, #20
{
   d60d0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d60d2:	2100      	movs	r1, #0
   d60d4:	f000 fafe 	bl	d66d4 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d60d8:	4620      	mov	r0, r4
   d60da:	bd10      	pop	{r4, pc}

000d60dc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d60dc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d60de:	4c10      	ldr	r4, [pc, #64]	; (d6120 <_Z16_fetch_usbserialv+0x44>)
{
   d60e0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d60e2:	a803      	add	r0, sp, #12
   d60e4:	f7ff fff2 	bl	d60cc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d60e8:	7821      	ldrb	r1, [r4, #0]
   d60ea:	f3bf 8f5b 	dmb	ish
   d60ee:	f011 0101 	ands.w	r1, r1, #1
   d60f2:	d111      	bne.n	d6118 <_Z16_fetch_usbserialv+0x3c>
   d60f4:	4620      	mov	r0, r4
   d60f6:	9101      	str	r1, [sp, #4]
   d60f8:	f7fd ffda 	bl	d40b0 <__cxa_guard_acquire>
   d60fc:	9901      	ldr	r1, [sp, #4]
   d60fe:	b158      	cbz	r0, d6118 <_Z16_fetch_usbserialv+0x3c>
   d6100:	aa03      	add	r2, sp, #12
   d6102:	4808      	ldr	r0, [pc, #32]	; (d6124 <_Z16_fetch_usbserialv+0x48>)
   d6104:	f7ff ffca 	bl	d609c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6108:	4620      	mov	r0, r4
   d610a:	f7fd ffd6 	bl	d40ba <__cxa_guard_release>
   d610e:	4a06      	ldr	r2, [pc, #24]	; (d6128 <_Z16_fetch_usbserialv+0x4c>)
   d6110:	4906      	ldr	r1, [pc, #24]	; (d612c <_Z16_fetch_usbserialv+0x50>)
   d6112:	4804      	ldr	r0, [pc, #16]	; (d6124 <_Z16_fetch_usbserialv+0x48>)
   d6114:	f000 fab8 	bl	d6688 <__aeabi_atexit>
	return _usbserial;
}
   d6118:	4802      	ldr	r0, [pc, #8]	; (d6124 <_Z16_fetch_usbserialv+0x48>)
   d611a:	b008      	add	sp, #32
   d611c:	bd10      	pop	{r4, pc}
   d611e:	bf00      	nop
   d6120:	2003e68c 	.word	0x2003e68c
   d6124:	2003e690 	.word	0x2003e690
   d6128:	2003e5bc 	.word	0x2003e5bc
   d612c:	000d6025 	.word	0x000d6025

000d6130 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d6130:	4700      	bx	r0
	...

000d6134 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d6134:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d6138:	2400      	movs	r4, #0
{
   d613a:	461d      	mov	r5, r3
   d613c:	460f      	mov	r7, r1
   d613e:	4690      	mov	r8, r2
   d6140:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d6142:	f7ff fa55 	bl	d55f0 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d6146:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d6148:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d614c:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d6150:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d6154:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d6158:	bfa2      	ittt	ge
   d615a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d615e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d6162:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d6164:	4907      	ldr	r1, [pc, #28]	; (d6184 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d6166:	9400      	str	r4, [sp, #0]
   d6168:	4643      	mov	r3, r8
   d616a:	463a      	mov	r2, r7
   d616c:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d616e:	bfa8      	it	ge
   d6170:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d6174:	f7ff fa34 	bl	d55e0 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d6178:	fab0 f080 	clz	r0, r0
   d617c:	0940      	lsrs	r0, r0, #5
   d617e:	b004      	add	sp, #16
   d6180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6184:	000d6131 	.word	0x000d6131

000d6188 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d6188:	f7ff ba3a 	b.w	d5600 <HAL_Interrupts_Enable_All>

000d618c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d618c:	4770      	bx	lr

000d618e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d618e:	7441      	strb	r1, [r0, #17]
}
   d6190:	4770      	bx	lr

000d6192 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d6192:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d6194:	7c00      	ldrb	r0, [r0, #16]
   d6196:	f7ff fab3 	bl	d5700 <hal_usart_available_data_for_write>
}
   d619a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d619e:	bd08      	pop	{r3, pc}

000d61a0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d61a0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d61a2:	7c00      	ldrb	r0, [r0, #16]
   d61a4:	f7ff fa84 	bl	d56b0 <hal_usart_available>
}
   d61a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d61ac:	bd08      	pop	{r3, pc}

000d61ae <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d61ae:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d61b0:	7c00      	ldrb	r0, [r0, #16]
   d61b2:	f7ff fa8d 	bl	d56d0 <hal_usart_peek>
}
   d61b6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d61ba:	bd08      	pop	{r3, pc}

000d61bc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d61bc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d61be:	7c00      	ldrb	r0, [r0, #16]
   d61c0:	f7ff fa7e 	bl	d56c0 <hal_usart_read>
}
   d61c4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d61c8:	bd08      	pop	{r3, pc}

000d61ca <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d61ca:	7c00      	ldrb	r0, [r0, #16]
   d61cc:	f7ff ba88 	b.w	d56e0 <hal_usart_flush>

000d61d0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d61d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d61d2:	7c45      	ldrb	r5, [r0, #17]
{
   d61d4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d61d6:	b12d      	cbz	r5, d61e4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d61d8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d61da:	b003      	add	sp, #12
   d61dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d61e0:	f7ff ba5e 	b.w	d56a0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d61e4:	7c00      	ldrb	r0, [r0, #16]
   d61e6:	9101      	str	r1, [sp, #4]
   d61e8:	f7ff fa8a 	bl	d5700 <hal_usart_available_data_for_write>
   d61ec:	2800      	cmp	r0, #0
   d61ee:	9901      	ldr	r1, [sp, #4]
   d61f0:	dcf2      	bgt.n	d61d8 <_ZN11USARTSerial5writeEh+0x8>
}
   d61f2:	4628      	mov	r0, r5
   d61f4:	b003      	add	sp, #12
   d61f6:	bd30      	pop	{r4, r5, pc}

000d61f8 <_ZN11USARTSerialD0Ev>:
   d61f8:	b510      	push	{r4, lr}
   d61fa:	2114      	movs	r1, #20
   d61fc:	4604      	mov	r4, r0
   d61fe:	f000 fa48 	bl	d6692 <_ZdlPvj>
   d6202:	4620      	mov	r0, r4
   d6204:	bd10      	pop	{r4, pc}
	...

000d6208 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6208:	b510      	push	{r4, lr}
   d620a:	f04f 0c00 	mov.w	ip, #0
   d620e:	4604      	mov	r4, r0
   d6210:	4608      	mov	r0, r1
   d6212:	4611      	mov	r1, r2
   d6214:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6218:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d621c:	4a04      	ldr	r2, [pc, #16]	; (d6230 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d621e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6220:	2201      	movs	r2, #1
  _serial = serial;
   d6222:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6224:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d6226:	461a      	mov	r2, r3
   d6228:	f7ff fa32 	bl	d5690 <hal_usart_init>
}
   d622c:	4620      	mov	r0, r4
   d622e:	bd10      	pop	{r4, pc}
   d6230:	000d7378 	.word	0x000d7378

000d6234 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6234:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6236:	4c0e      	ldr	r4, [pc, #56]	; (d6270 <_Z22__fetch_global_Serial1v+0x3c>)
   d6238:	7821      	ldrb	r1, [r4, #0]
   d623a:	f3bf 8f5b 	dmb	ish
   d623e:	f011 0101 	ands.w	r1, r1, #1
   d6242:	d112      	bne.n	d626a <_Z22__fetch_global_Serial1v+0x36>
   d6244:	4620      	mov	r0, r4
   d6246:	9101      	str	r1, [sp, #4]
   d6248:	f7fd ff32 	bl	d40b0 <__cxa_guard_acquire>
   d624c:	9901      	ldr	r1, [sp, #4]
   d624e:	b160      	cbz	r0, d626a <_Z22__fetch_global_Serial1v+0x36>
   d6250:	4a08      	ldr	r2, [pc, #32]	; (d6274 <_Z22__fetch_global_Serial1v+0x40>)
   d6252:	4b09      	ldr	r3, [pc, #36]	; (d6278 <_Z22__fetch_global_Serial1v+0x44>)
   d6254:	4809      	ldr	r0, [pc, #36]	; (d627c <_Z22__fetch_global_Serial1v+0x48>)
   d6256:	f7ff ffd7 	bl	d6208 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d625a:	4620      	mov	r0, r4
   d625c:	f7fd ff2d 	bl	d40ba <__cxa_guard_release>
   d6260:	4a07      	ldr	r2, [pc, #28]	; (d6280 <_Z22__fetch_global_Serial1v+0x4c>)
   d6262:	4908      	ldr	r1, [pc, #32]	; (d6284 <_Z22__fetch_global_Serial1v+0x50>)
   d6264:	4805      	ldr	r0, [pc, #20]	; (d627c <_Z22__fetch_global_Serial1v+0x48>)
   d6266:	f000 fa0f 	bl	d6688 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d626a:	4804      	ldr	r0, [pc, #16]	; (d627c <_Z22__fetch_global_Serial1v+0x48>)
   d626c:	b002      	add	sp, #8
   d626e:	bd10      	pop	{r4, pc}
   d6270:	2003e6a4 	.word	0x2003e6a4
   d6274:	2003e6a8 	.word	0x2003e6a8
   d6278:	2003e72c 	.word	0x2003e72c
   d627c:	2003e7b0 	.word	0x2003e7b0
   d6280:	2003e5bc 	.word	0x2003e5bc
   d6284:	000d618d 	.word	0x000d618d

000d6288 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d6288:	4770      	bx	lr

000d628a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d628a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d628c:	4606      	mov	r6, r0
   d628e:	4615      	mov	r5, r2
   d6290:	460c      	mov	r4, r1
   d6292:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6294:	42bc      	cmp	r4, r7
   d6296:	d006      	beq.n	d62a6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6298:	6833      	ldr	r3, [r6, #0]
   d629a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d629e:	689b      	ldr	r3, [r3, #8]
   d62a0:	4630      	mov	r0, r6
   d62a2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d62a4:	e7f6      	b.n	d6294 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d62a6:	4628      	mov	r0, r5
   d62a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d62aa <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d62aa:	7c00      	ldrb	r0, [r0, #16]
   d62ac:	2200      	movs	r2, #0
   d62ae:	f7ff ba4f 	b.w	d5750 <hal_i2c_write>

000d62b2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d62b2:	7c00      	ldrb	r0, [r0, #16]
   d62b4:	2100      	movs	r1, #0
   d62b6:	f7ff ba53 	b.w	d5760 <hal_i2c_available>

000d62ba <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d62ba:	7c00      	ldrb	r0, [r0, #16]
   d62bc:	2100      	movs	r1, #0
   d62be:	f7ff ba57 	b.w	d5770 <hal_i2c_read>

000d62c2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d62c2:	7c00      	ldrb	r0, [r0, #16]
   d62c4:	2100      	movs	r1, #0
   d62c6:	f7ff ba5b 	b.w	d5780 <hal_i2c_peek>

000d62ca <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d62ca:	7c00      	ldrb	r0, [r0, #16]
   d62cc:	2100      	movs	r1, #0
   d62ce:	f7ff ba5f 	b.w	d5790 <hal_i2c_flush>

000d62d2 <_ZN7TwoWireD0Ev>:
   d62d2:	b510      	push	{r4, lr}
   d62d4:	2114      	movs	r1, #20
   d62d6:	4604      	mov	r4, r0
   d62d8:	f000 f9db 	bl	d6692 <_ZdlPvj>
   d62dc:	4620      	mov	r0, r4
   d62de:	bd10      	pop	{r4, pc}

000d62e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d62e0:	b510      	push	{r4, lr}
   d62e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d62e6:	4604      	mov	r4, r0
   d62e8:	4608      	mov	r0, r1
   d62ea:	2100      	movs	r1, #0
   d62ec:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d62f0:	4b03      	ldr	r3, [pc, #12]	; (d6300 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d62f2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d62f4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d62f6:	4611      	mov	r1, r2
   d62f8:	f7ff fa5a 	bl	d57b0 <hal_i2c_init>
}
   d62fc:	4620      	mov	r0, r4
   d62fe:	bd10      	pop	{r4, pc}
   d6300:	000d73a8 	.word	0x000d73a8

000d6304 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d6304:	7c00      	ldrb	r0, [r0, #16]
   d6306:	2200      	movs	r2, #0
   d6308:	f7ff ba02 	b.w	d5710 <hal_i2c_set_speed>

000d630c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d630c:	2300      	movs	r3, #0
   d630e:	7c00      	ldrb	r0, [r0, #16]
   d6310:	461a      	mov	r2, r3
   d6312:	4619      	mov	r1, r3
   d6314:	f7ff ba04 	b.w	d5720 <hal_i2c_begin>

000d6318 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d6318:	7c00      	ldrb	r0, [r0, #16]
   d631a:	2200      	movs	r2, #0
   d631c:	f7ff ba08 	b.w	d5730 <hal_i2c_begin_transmission>

000d6320 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d6320:	b2c9      	uxtb	r1, r1
   d6322:	f7ff bff9 	b.w	d6318 <_ZN7TwoWire17beginTransmissionEh>

000d6326 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d6326:	7c00      	ldrb	r0, [r0, #16]
   d6328:	2200      	movs	r2, #0
   d632a:	f7ff ba09 	b.w	d5740 <hal_i2c_end_transmission>

000d632e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d632e:	2101      	movs	r1, #1
   d6330:	f7ff bff9 	b.w	d6326 <_ZN7TwoWire15endTransmissionEh>

000d6334 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6334:	2200      	movs	r2, #0
   d6336:	6840      	ldr	r0, [r0, #4]
   d6338:	4611      	mov	r1, r2
   d633a:	f7ff bb05 	b.w	d5948 <network_ready>

000d633e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d633e:	2200      	movs	r2, #0
   d6340:	6840      	ldr	r0, [r0, #4]
   d6342:	4611      	mov	r1, r2
   d6344:	f7ff bb20 	b.w	d5988 <network_listening>

000d6348 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6348:	2200      	movs	r2, #0
   d634a:	6840      	ldr	r0, [r0, #4]
   d634c:	4611      	mov	r1, r2
   d634e:	f7ff bb2b 	b.w	d59a8 <network_get_listen_timeout>

000d6352 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6352:	6840      	ldr	r0, [r0, #4]
   d6354:	2200      	movs	r2, #0
   d6356:	f7ff bb1f 	b.w	d5998 <network_set_listen_timeout>

000d635a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d635a:	6840      	ldr	r0, [r0, #4]
   d635c:	2200      	movs	r2, #0
   d635e:	f081 0101 	eor.w	r1, r1, #1
   d6362:	f7ff bb09 	b.w	d5978 <network_listen>

000d6366 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6366:	2300      	movs	r3, #0
   d6368:	6840      	ldr	r0, [r0, #4]
   d636a:	461a      	mov	r2, r3
   d636c:	4619      	mov	r1, r3
   d636e:	f7ff bafb 	b.w	d5968 <network_off>

000d6372 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6372:	2200      	movs	r2, #0
   d6374:	6840      	ldr	r0, [r0, #4]
   d6376:	4611      	mov	r1, r2
   d6378:	f7ff bad6 	b.w	d5928 <network_connecting>

000d637c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d637c:	6840      	ldr	r0, [r0, #4]
   d637e:	2200      	movs	r2, #0
   d6380:	2102      	movs	r1, #2
   d6382:	f7ff bad9 	b.w	d5938 <network_disconnect>

000d6386 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6386:	2300      	movs	r3, #0
   d6388:	6840      	ldr	r0, [r0, #4]
   d638a:	461a      	mov	r2, r3
   d638c:	f7ff bac4 	b.w	d5918 <network_connect>

000d6390 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6390:	4b02      	ldr	r3, [pc, #8]	; (d639c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6392:	2204      	movs	r2, #4
   d6394:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6396:	4a02      	ldr	r2, [pc, #8]	; (d63a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6398:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d639a:	4770      	bx	lr
   d639c:	2003e7c4 	.word	0x2003e7c4
   d63a0:	000d73d0 	.word	0x000d73d0

000d63a4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d63a4:	2300      	movs	r3, #0
   d63a6:	6840      	ldr	r0, [r0, #4]
   d63a8:	461a      	mov	r2, r3
   d63aa:	f7ff bab5 	b.w	d5918 <network_connect>

000d63ae <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d63ae:	6840      	ldr	r0, [r0, #4]
   d63b0:	2200      	movs	r2, #0
   d63b2:	2102      	movs	r1, #2
   d63b4:	f7ff bac0 	b.w	d5938 <network_disconnect>

000d63b8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d63b8:	2200      	movs	r2, #0
   d63ba:	6840      	ldr	r0, [r0, #4]
   d63bc:	4611      	mov	r1, r2
   d63be:	f7ff bab3 	b.w	d5928 <network_connecting>

000d63c2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d63c2:	2200      	movs	r2, #0
   d63c4:	6840      	ldr	r0, [r0, #4]
   d63c6:	4611      	mov	r1, r2
   d63c8:	f7ff babe 	b.w	d5948 <network_ready>

000d63cc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d63cc:	2300      	movs	r3, #0
   d63ce:	6840      	ldr	r0, [r0, #4]
   d63d0:	461a      	mov	r2, r3
   d63d2:	4619      	mov	r1, r3
   d63d4:	f7ff bac0 	b.w	d5958 <network_on>

000d63d8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d63d8:	2300      	movs	r3, #0
   d63da:	6840      	ldr	r0, [r0, #4]
   d63dc:	461a      	mov	r2, r3
   d63de:	4619      	mov	r1, r3
   d63e0:	f7ff bac2 	b.w	d5968 <network_off>

000d63e4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d63e4:	6840      	ldr	r0, [r0, #4]
   d63e6:	2100      	movs	r1, #0
   d63e8:	f7ff bae6 	b.w	d59b8 <network_is_on>

000d63ec <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d63ec:	6840      	ldr	r0, [r0, #4]
   d63ee:	2100      	movs	r1, #0
   d63f0:	f7ff baea 	b.w	d59c8 <network_is_off>

000d63f4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d63f4:	6840      	ldr	r0, [r0, #4]
   d63f6:	2200      	movs	r2, #0
   d63f8:	f081 0101 	eor.w	r1, r1, #1
   d63fc:	f7ff babc 	b.w	d5978 <network_listen>

000d6400 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6400:	6840      	ldr	r0, [r0, #4]
   d6402:	2200      	movs	r2, #0
   d6404:	f7ff bac8 	b.w	d5998 <network_set_listen_timeout>

000d6408 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6408:	2200      	movs	r2, #0
   d640a:	6840      	ldr	r0, [r0, #4]
   d640c:	4611      	mov	r1, r2
   d640e:	f7ff bacb 	b.w	d59a8 <network_get_listen_timeout>

000d6412 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6412:	2200      	movs	r2, #0
   d6414:	6840      	ldr	r0, [r0, #4]
   d6416:	4611      	mov	r1, r2
   d6418:	f7ff bab6 	b.w	d5988 <network_listening>

000d641c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d641c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6420:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d6422:	b095      	sub	sp, #84	; 0x54
   d6424:	4616      	mov	r6, r2
   d6426:	460d      	mov	r5, r1
   d6428:	4607      	mov	r7, r0
    IPAddress addr;
   d642a:	f7ff fdbd 	bl	d5fa8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d642e:	4621      	mov	r1, r4
   d6430:	2218      	movs	r2, #24
   d6432:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6434:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6436:	f000 f94d 	bl	d66d4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d643a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d643c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6440:	4621      	mov	r1, r4
   d6442:	466b      	mov	r3, sp
   d6444:	aa0c      	add	r2, sp, #48	; 0x30
   d6446:	4630      	mov	r0, r6
   d6448:	f7ff f8a2 	bl	d5590 <netdb_getaddrinfo>
    if (!r) {
   d644c:	4604      	mov	r4, r0
   d644e:	2800      	cmp	r0, #0
   d6450:	d14c      	bne.n	d64ec <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6452:	4602      	mov	r2, r0
   d6454:	2101      	movs	r1, #1
   d6456:	6868      	ldr	r0, [r5, #4]
   d6458:	f7ff fa76 	bl	d5948 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d645c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d645e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6460:	4622      	mov	r2, r4
   d6462:	6868      	ldr	r0, [r5, #4]
   d6464:	f7ff fa70 	bl	d5948 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6468:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d646a:	4681      	mov	r9, r0
        bool ok = false;
   d646c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d646e:	2e00      	cmp	r6, #0
   d6470:	d03c      	beq.n	d64ec <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d6472:	2900      	cmp	r1, #0
   d6474:	d13a      	bne.n	d64ec <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6476:	6873      	ldr	r3, [r6, #4]
   d6478:	2b02      	cmp	r3, #2
   d647a:	d003      	beq.n	d6484 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d647c:	2b0a      	cmp	r3, #10
   d647e:	d011      	beq.n	d64a4 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6480:	69f6      	ldr	r6, [r6, #28]
   d6482:	e7f4      	b.n	d646e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6484:	f1b8 0f00 	cmp.w	r8, #0
   d6488:	d00a      	beq.n	d64a0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d648a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d648c:	a806      	add	r0, sp, #24
   d648e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d6490:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d6492:	f7ff fdb7 	bl	d6004 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d6496:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6498:	1d3c      	adds	r4, r7, #4
   d649a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d649c:	682b      	ldr	r3, [r5, #0]
   d649e:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d64a0:	4641      	mov	r1, r8
   d64a2:	e7ed      	b.n	d6480 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d64a4:	f1b9 0f00 	cmp.w	r9, #0
   d64a8:	d101      	bne.n	d64ae <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d64aa:	4649      	mov	r1, r9
   d64ac:	e7e8      	b.n	d6480 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d64ae:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d64b0:	2210      	movs	r2, #16
   d64b2:	a801      	add	r0, sp, #4
   d64b4:	f000 f90e 	bl	d66d4 <memset>
                    a.v = 6;
   d64b8:	2306      	movs	r3, #6
   d64ba:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d64be:	ad01      	add	r5, sp, #4
   d64c0:	f104 0308 	add.w	r3, r4, #8
   d64c4:	3418      	adds	r4, #24
   d64c6:	6818      	ldr	r0, [r3, #0]
   d64c8:	6859      	ldr	r1, [r3, #4]
   d64ca:	462a      	mov	r2, r5
   d64cc:	c203      	stmia	r2!, {r0, r1}
   d64ce:	3308      	adds	r3, #8
   d64d0:	42a3      	cmp	r3, r4
   d64d2:	4615      	mov	r5, r2
   d64d4:	d1f7      	bne.n	d64c6 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d64d6:	a901      	add	r1, sp, #4
   d64d8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d64da:	ad07      	add	r5, sp, #28
   d64dc:	f7ff fd72 	bl	d5fc4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d64e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d64e2:	1d3c      	adds	r4, r7, #4
   d64e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d64e6:	682b      	ldr	r3, [r5, #0]
   d64e8:	7023      	strb	r3, [r4, #0]
   d64ea:	e7de      	b.n	d64aa <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d64ec:	9800      	ldr	r0, [sp, #0]
   d64ee:	f7ff f847 	bl	d5580 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d64f2:	4638      	mov	r0, r7
   d64f4:	b015      	add	sp, #84	; 0x54
   d64f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d64fc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d64fc:	4b02      	ldr	r3, [pc, #8]	; (d6508 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d64fe:	4a03      	ldr	r2, [pc, #12]	; (d650c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6500:	601a      	str	r2, [r3, #0]
   d6502:	2200      	movs	r2, #0
   d6504:	605a      	str	r2, [r3, #4]

} // spark
   d6506:	4770      	bx	lr
   d6508:	2003e7cc 	.word	0x2003e7cc
   d650c:	000d740c 	.word	0x000d740c

000d6510 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6510:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6512:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6514:	d902      	bls.n	d651c <pinAvailable+0xc>
    return false;
   d6516:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6518:	b002      	add	sp, #8
   d651a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d651c:	f1a0 030b 	sub.w	r3, r0, #11
   d6520:	2b02      	cmp	r3, #2
   d6522:	d81a      	bhi.n	d655a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6524:	4c17      	ldr	r4, [pc, #92]	; (d6584 <pinAvailable+0x74>)
   d6526:	7821      	ldrb	r1, [r4, #0]
   d6528:	f3bf 8f5b 	dmb	ish
   d652c:	f011 0101 	ands.w	r1, r1, #1
   d6530:	d10b      	bne.n	d654a <pinAvailable+0x3a>
   d6532:	4620      	mov	r0, r4
   d6534:	9101      	str	r1, [sp, #4]
   d6536:	f7fd fdbb 	bl	d40b0 <__cxa_guard_acquire>
   d653a:	9901      	ldr	r1, [sp, #4]
   d653c:	b128      	cbz	r0, d654a <pinAvailable+0x3a>
   d653e:	4812      	ldr	r0, [pc, #72]	; (d6588 <pinAvailable+0x78>)
   d6540:	f7ff fab6 	bl	d5ab0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6544:	4620      	mov	r0, r4
   d6546:	f7fd fdb8 	bl	d40ba <__cxa_guard_release>
   d654a:	4b0f      	ldr	r3, [pc, #60]	; (d6588 <pinAvailable+0x78>)
   d654c:	7818      	ldrb	r0, [r3, #0]
   d654e:	f7ff f94f 	bl	d57f0 <hal_spi_is_enabled>
   d6552:	2800      	cmp	r0, #0
   d6554:	d1df      	bne.n	d6516 <pinAvailable+0x6>
  return true; // 'pin' is available
   d6556:	2001      	movs	r0, #1
   d6558:	e7de      	b.n	d6518 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d655a:	2801      	cmp	r0, #1
   d655c:	d809      	bhi.n	d6572 <pinAvailable+0x62>
   d655e:	f000 f86b 	bl	d6638 <_Z19__fetch_global_Wirev>
   d6562:	2100      	movs	r1, #0
   d6564:	7c00      	ldrb	r0, [r0, #16]
   d6566:	f7ff f91b 	bl	d57a0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d656a:	f080 0001 	eor.w	r0, r0, #1
   d656e:	b2c0      	uxtb	r0, r0
   d6570:	e7d2      	b.n	d6518 <pinAvailable+0x8>
   d6572:	3809      	subs	r0, #9
   d6574:	2801      	cmp	r0, #1
   d6576:	d8ee      	bhi.n	d6556 <pinAvailable+0x46>
   d6578:	f7ff fe5c 	bl	d6234 <_Z22__fetch_global_Serial1v>
   d657c:	7c00      	ldrb	r0, [r0, #16]
   d657e:	f7ff f8b7 	bl	d56f0 <hal_usart_is_enabled>
   d6582:	e7f2      	b.n	d656a <pinAvailable+0x5a>
   d6584:	2003e644 	.word	0x2003e644
   d6588:	2003e648 	.word	0x2003e648

000d658c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d658c:	2823      	cmp	r0, #35	; 0x23
{
   d658e:	b538      	push	{r3, r4, r5, lr}
   d6590:	4604      	mov	r4, r0
   d6592:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6594:	d80a      	bhi.n	d65ac <pinMode+0x20>
   d6596:	29ff      	cmp	r1, #255	; 0xff
   d6598:	d008      	beq.n	d65ac <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d659a:	f7ff ffb9 	bl	d6510 <pinAvailable>
   d659e:	b128      	cbz	r0, d65ac <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d65a0:	4629      	mov	r1, r5
   d65a2:	4620      	mov	r0, r4
}
   d65a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d65a8:	f7fe bffa 	b.w	d55a0 <HAL_Pin_Mode>
}
   d65ac:	bd38      	pop	{r3, r4, r5, pc}

000d65ae <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d65ae:	b538      	push	{r3, r4, r5, lr}
   d65b0:	4604      	mov	r4, r0
   d65b2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d65b4:	f7fe fffc 	bl	d55b0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d65b8:	28ff      	cmp	r0, #255	; 0xff
   d65ba:	d010      	beq.n	d65de <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d65bc:	2806      	cmp	r0, #6
   d65be:	d804      	bhi.n	d65ca <digitalWrite+0x1c>
   d65c0:	234d      	movs	r3, #77	; 0x4d
   d65c2:	fa23 f000 	lsr.w	r0, r3, r0
   d65c6:	07c3      	lsls	r3, r0, #31
   d65c8:	d409      	bmi.n	d65de <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d65ca:	4620      	mov	r0, r4
   d65cc:	f7ff ffa0 	bl	d6510 <pinAvailable>
   d65d0:	b128      	cbz	r0, d65de <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d65d2:	4629      	mov	r1, r5
   d65d4:	4620      	mov	r0, r4
}
   d65d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d65da:	f7fe bff1 	b.w	d55c0 <HAL_GPIO_Write>
}
   d65de:	bd38      	pop	{r3, r4, r5, pc}

000d65e0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d65e0:	b510      	push	{r4, lr}
   d65e2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d65e4:	f7fe ffe4 	bl	d55b0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d65e8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d65ea:	b2db      	uxtb	r3, r3
   d65ec:	2b01      	cmp	r3, #1
   d65ee:	d908      	bls.n	d6602 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d65f0:	4620      	mov	r0, r4
   d65f2:	f7ff ff8d 	bl	d6510 <pinAvailable>
   d65f6:	b120      	cbz	r0, d6602 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d65f8:	4620      	mov	r0, r4
}
   d65fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d65fe:	f7fe bfe7 	b.w	d55d0 <HAL_GPIO_Read>
}
   d6602:	2000      	movs	r0, #0
   d6604:	bd10      	pop	{r4, pc}
	...

000d6608 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d6608:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d660a:	2300      	movs	r3, #0
   d660c:	2520      	movs	r5, #32
   d660e:	8043      	strh	r3, [r0, #2]
   d6610:	2314      	movs	r3, #20
{
   d6612:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6614:	8003      	strh	r3, [r0, #0]
   d6616:	6085      	str	r5, [r0, #8]
   d6618:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d661a:	4906      	ldr	r1, [pc, #24]	; (d6634 <_Z17acquireWireBufferv+0x2c>)
   d661c:	4628      	mov	r0, r5
   d661e:	f000 f83a 	bl	d6696 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6622:	4904      	ldr	r1, [pc, #16]	; (d6634 <_Z17acquireWireBufferv+0x2c>)
	};
   d6624:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6626:	4628      	mov	r0, r5
   d6628:	f000 f835 	bl	d6696 <_ZnajRKSt9nothrow_t>
	};
   d662c:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d662e:	4620      	mov	r0, r4
   d6630:	bd38      	pop	{r3, r4, r5, pc}
   d6632:	bf00      	nop
   d6634:	000d7440 	.word	0x000d7440

000d6638 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6638:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d663a:	4d0f      	ldr	r5, [pc, #60]	; (d6678 <_Z19__fetch_global_Wirev+0x40>)
   d663c:	7829      	ldrb	r1, [r5, #0]
   d663e:	f3bf 8f5b 	dmb	ish
   d6642:	f011 0401 	ands.w	r4, r1, #1
{
   d6646:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6648:	d113      	bne.n	d6672 <_Z19__fetch_global_Wirev+0x3a>
   d664a:	4628      	mov	r0, r5
   d664c:	f7fd fd30 	bl	d40b0 <__cxa_guard_acquire>
   d6650:	b178      	cbz	r0, d6672 <_Z19__fetch_global_Wirev+0x3a>
   d6652:	a801      	add	r0, sp, #4
   d6654:	f7ff ffd8 	bl	d6608 <_Z17acquireWireBufferv>
   d6658:	aa01      	add	r2, sp, #4
   d665a:	4621      	mov	r1, r4
   d665c:	4807      	ldr	r0, [pc, #28]	; (d667c <_Z19__fetch_global_Wirev+0x44>)
   d665e:	f7ff fe3f 	bl	d62e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d6662:	4628      	mov	r0, r5
   d6664:	f7fd fd29 	bl	d40ba <__cxa_guard_release>
   d6668:	4a05      	ldr	r2, [pc, #20]	; (d6680 <_Z19__fetch_global_Wirev+0x48>)
   d666a:	4906      	ldr	r1, [pc, #24]	; (d6684 <_Z19__fetch_global_Wirev+0x4c>)
   d666c:	4803      	ldr	r0, [pc, #12]	; (d667c <_Z19__fetch_global_Wirev+0x44>)
   d666e:	f000 f80b 	bl	d6688 <__aeabi_atexit>
	return wire;
}
   d6672:	4802      	ldr	r0, [pc, #8]	; (d667c <_Z19__fetch_global_Wirev+0x44>)
   d6674:	b007      	add	sp, #28
   d6676:	bd30      	pop	{r4, r5, pc}
   d6678:	2003e7d8 	.word	0x2003e7d8
   d667c:	2003e7dc 	.word	0x2003e7dc
   d6680:	2003e5bc 	.word	0x2003e5bc
   d6684:	000d6289 	.word	0x000d6289

000d6688 <__aeabi_atexit>:
   d6688:	460b      	mov	r3, r1
   d668a:	4601      	mov	r1, r0
   d668c:	4618      	mov	r0, r3
   d668e:	f000 b805 	b.w	d669c <__cxa_atexit>

000d6692 <_ZdlPvj>:
   d6692:	f7fd bd00 	b.w	d4096 <_ZdlPv>

000d6696 <_ZnajRKSt9nothrow_t>:
   d6696:	f7fd bcfc 	b.w	d4092 <_Znaj>
	...

000d669c <__cxa_atexit>:
   d669c:	b510      	push	{r4, lr}
   d669e:	4c05      	ldr	r4, [pc, #20]	; (d66b4 <__cxa_atexit+0x18>)
   d66a0:	4613      	mov	r3, r2
   d66a2:	b12c      	cbz	r4, d66b0 <__cxa_atexit+0x14>
   d66a4:	460a      	mov	r2, r1
   d66a6:	4601      	mov	r1, r0
   d66a8:	2002      	movs	r0, #2
   d66aa:	f3af 8000 	nop.w
   d66ae:	bd10      	pop	{r4, pc}
   d66b0:	4620      	mov	r0, r4
   d66b2:	e7fc      	b.n	d66ae <__cxa_atexit+0x12>
   d66b4:	00000000 	.word	0x00000000

000d66b8 <memcpy>:
   d66b8:	440a      	add	r2, r1
   d66ba:	4291      	cmp	r1, r2
   d66bc:	f100 33ff 	add.w	r3, r0, #4294967295
   d66c0:	d100      	bne.n	d66c4 <memcpy+0xc>
   d66c2:	4770      	bx	lr
   d66c4:	b510      	push	{r4, lr}
   d66c6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d66ca:	f803 4f01 	strb.w	r4, [r3, #1]!
   d66ce:	4291      	cmp	r1, r2
   d66d0:	d1f9      	bne.n	d66c6 <memcpy+0xe>
   d66d2:	bd10      	pop	{r4, pc}

000d66d4 <memset>:
   d66d4:	4402      	add	r2, r0
   d66d6:	4603      	mov	r3, r0
   d66d8:	4293      	cmp	r3, r2
   d66da:	d100      	bne.n	d66de <memset+0xa>
   d66dc:	4770      	bx	lr
   d66de:	f803 1b01 	strb.w	r1, [r3], #1
   d66e2:	e7f9      	b.n	d66d8 <memset+0x4>

000d66e4 <srand>:
   d66e4:	b538      	push	{r3, r4, r5, lr}
   d66e6:	4b0d      	ldr	r3, [pc, #52]	; (d671c <srand+0x38>)
   d66e8:	681d      	ldr	r5, [r3, #0]
   d66ea:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d66ec:	4604      	mov	r4, r0
   d66ee:	b97b      	cbnz	r3, d6710 <srand+0x2c>
   d66f0:	2018      	movs	r0, #24
   d66f2:	f7ff f979 	bl	d59e8 <malloc>
   d66f6:	4a0a      	ldr	r2, [pc, #40]	; (d6720 <srand+0x3c>)
   d66f8:	4b0a      	ldr	r3, [pc, #40]	; (d6724 <srand+0x40>)
   d66fa:	63a8      	str	r0, [r5, #56]	; 0x38
   d66fc:	e9c0 2300 	strd	r2, r3, [r0]
   d6700:	4b09      	ldr	r3, [pc, #36]	; (d6728 <srand+0x44>)
   d6702:	6083      	str	r3, [r0, #8]
   d6704:	230b      	movs	r3, #11
   d6706:	8183      	strh	r3, [r0, #12]
   d6708:	2201      	movs	r2, #1
   d670a:	2300      	movs	r3, #0
   d670c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6710:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6712:	2200      	movs	r2, #0
   d6714:	611c      	str	r4, [r3, #16]
   d6716:	615a      	str	r2, [r3, #20]
   d6718:	bd38      	pop	{r3, r4, r5, pc}
   d671a:	bf00      	nop
   d671c:	2003e558 	.word	0x2003e558
   d6720:	abcd330e 	.word	0xabcd330e
   d6724:	e66d1234 	.word	0xe66d1234
   d6728:	0005deec 	.word	0x0005deec

000d672c <strlen>:
   d672c:	4603      	mov	r3, r0
   d672e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6732:	2a00      	cmp	r2, #0
   d6734:	d1fb      	bne.n	d672e <strlen+0x2>
   d6736:	1a18      	subs	r0, r3, r0
   d6738:	3801      	subs	r0, #1
   d673a:	4770      	bx	lr

000d673c <dynalib_user>:
   d673c:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d674c:	0000 0000 6948 4900 746e 7265 7572 7470     ....Hi.Interrupt
   d675c:	6f20 6363 7275 6465 4900 746e 7265 7572      occured.Interru
   d676c:	7470 6f69 736e 6420 7369 6261 656c 0064     ptions disabled.
   d677c:	6e49 6574 7272 7075 6974 6e6f 2073 6e65     Interruptions en
   d678c:	6261 656c 0064 6564 6166 6c75 2074 4d00     abled.default .M
   d679c:	4253 4c00 4253 3c00 5053 5349 7465 6974     SB.LSB.<SPISetti
   d67ac:	676e 2073 6564 6166 6c75 3e74 3c00 5053     ngs default>.<SP
   d67bc:	5349 7465 6974 676e 2073 7325 7525 2520     ISettings %s%u %
   d67cc:	2073 4f4d 4544 7525 003e                    s MODE%u>.

000d67d6 <_ZL4font>:
   d67d6:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d67e6:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d67f6:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d6806:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d6816:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d6826:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d6836:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d6846:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d6856:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d6866:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d6876:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d6886:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d6896:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d68a6:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d68b6:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d68c6:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d68d6:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d68e6:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d68f6:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d6906:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d6916:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d6926:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d6936:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d6946:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d6956:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d6966:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d6976:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d6986:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d6996:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d69a6:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d69b6:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d69c6:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d69d6:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d69e6:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d69f6:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d6a06:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d6a16:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d6a26:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d6a36:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d6a46:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d6a56:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d6a66:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   d6a76:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d6a86:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d6a96:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   d6aa6:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d6ab6:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   d6ac6:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   d6ad6:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   d6ae6:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d6af6:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d6b06:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d6b16:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d6b26:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d6b36:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d6b46:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   d6b56:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   d6b66:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   d6b76:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   d6b86:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   d6b96:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   d6ba6:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   d6bb6:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   d6bc6:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   d6bd6:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   d6be6:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   d6bf6:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   d6c06:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   d6c16:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   d6c26:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   d6c36:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   d6c46:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   d6c56:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   d6c66:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   d6c76:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   d6c86:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   d6c96:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   d6ca6:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   d6cb6:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   d6cc6:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
	...

000d6cd8 <_ZTV12Adafruit_GFX>:
	...
   d6ce8:	49bd 000d 5c89 000d 409d 000d 43c5 000d     .I...\...@...C..
   d6cf8:	43c7 000d 43f9 000d 43d5 000d 43e7 000d     .C...C...C...C..
   d6d08:	4309 000d 43c5 000d 45f1 000d 456b 000d     .C...C...E..kE..
   d6d18:	4411 000d 444f 000d 4489 000d 44cf 000d     .D..OD...D...D..
   d6d28:	456d 000d 44eb 000d                         mE...D..

000d6d30 <_ZTV16OledWingAdafruit>:
	...
   d6d38:	4acd 000d 4aed 000d 49bd 000d 5c89 000d     .J...J...I...\..
   d6d48:	4cb1 000d 43c5 000d 43c7 000d 43f9 000d     .L...C...C...C..
   d6d58:	43d5 000d 43e7 000d 4309 000d 43c5 000d     .C...C...C...C..
   d6d68:	45f1 000d 4e6b 000d 53ff 000d 53b1 000d     .E..kN...S...S..
   d6d78:	4489 000d 44cf 000d 456d 000d 44eb 000d     .D...D..mE...D..

000d6d88 <_ZTVN8particle11SPISettingsE>:
	...
   d6d90:	42b5 000d 4289 000d 428b 000d               .B...B...B..

000d6d9c <_ZL12splash1_data>:
   d6d9c:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   d6dac:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   d6dbc:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   d6dcc:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   d6ddc:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   d6dec:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   d6e04:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   d6e14:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   d6e24:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   d6e34:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   d6e44:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   d6e54:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   d6e64:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   d6e74:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   d6e84:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   d6e94:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   d6ea4:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   d6eb4:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   d6ec4:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   d6ed4:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   d6ee4:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   d6ef4:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   d6f04:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   d6f14:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   d6f2c:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   d6f44:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   d6f54:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   d6f64:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   d6f74:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   d6f84:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   d6f94:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   d6fa4:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   d6fb4:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   d6fc4:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   d6fd4:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   d6fe4:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   d6ff4:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   d7004:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   d7014:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   d7024:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   d7034:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   d7044:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   d7054:	fdff 5b6b 6adb c0fd                         ..k[.j..

000d705c <_ZL12splash2_data>:
   d705c:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   d706c:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   d707c:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   d7098:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   d70a8:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   d70b8:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   d70c8:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   d70d8:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   d70e8:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   d70f8:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   d7108:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   d7118:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   d7128:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   d7138:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   d7148:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   d7158:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   d7168:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   d7178:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   d7188:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   d7198:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   d71a8:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   d71b8:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   d71c8:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   d71d8:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   d71f0:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   d7200:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   d7210:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   d7220:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   d7230:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000d723c <_ZTV16Adafruit_SSD1306>:
	...
   d7244:	4c85 000d 4c9d 000d 49bd 000d 5c89 000d     .L...L...I...\..
   d7254:	4cb1 000d 43c5 000d 43c7 000d 43f9 000d     .L...C...C...C..
   d7264:	43d5 000d 43e7 000d 4309 000d 43c5 000d     .C...C...C...C..
   d7274:	45f1 000d 4e6b 000d 53ff 000d 53b1 000d     .E..kN...S...S..
   d7284:	4489 000d 44cf 000d 456d 000d 44eb 000d     .D...D..mE...D..

000d7294 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   d7294:	8000 e0c0 f8f0 fefc                         ........

000d729c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   d729c:	0100 0703 1f0f 7f3f                         ......?.

000d72a4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   d72a4:	d5ae a880                                   ....

000d72a8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   d72a8:	00d3 8d40                                   ..@.

000d72ac <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   d72ac:	0020 c8a1                                    ...

000d72b0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   d72b0:	40db a6a4 af2e                              .@....

000d72b6 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   d72b6:	02da 8f81                                   ....

000d72ba <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   d72ba:	12da                                         ...

000d72bd <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   d72bd:	02da                                         ...

000d72c0 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   d72c0:	0022 21ff 0000 0000                         "..!....

000d72c8 <_ZTVN5spark13EthernetClassE>:
	...
   d72d0:	5a87 000d 5a7d 000d 5a73 000d 5a69 000d     .Z..}Z..sZ..iZ..
   d72e0:	5a5d 000d 5a51 000d 63e5 000d 63ed 000d     ]Z..QZ...c...c..
   d72f0:	5a45 000d 5a3d 000d 5a33 000d 5a29 000d     EZ..=Z..3Z..)Z..
   d7300:	641d 000d                                   .d..

000d7304 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d7304:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
   d7314:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   d7324:	7361 7463 6d69 0065                         asctime.

000d732c <_ZTV9IPAddress>:
	...
   d7334:	5f45 000d 5f35 000d 5f37 000d               E_..5_..7_..

000d7340 <_ZTV9USBSerial>:
	...
   d7348:	6025 000d 608d 000d 6063 000d 5c89 000d     %`...`..c`...\..
   d7358:	6055 000d 6027 000d 6037 000d 6087 000d     U`..'`..7`...`..
   d7368:	6047 000d 6021 000d                         G`..!`..

000d7370 <_ZTV11USARTSerial>:
	...
   d7378:	618d 000d 61f9 000d 61d1 000d 5c89 000d     .a...a...a...\..
   d7388:	61a1 000d 61bd 000d 61af 000d 61cb 000d     .a...a...a...a..
   d7398:	618f 000d 6193 000d                         .a...a..

000d73a0 <_ZTV7TwoWire>:
	...
   d73a8:	6289 000d 62d3 000d 62ab 000d 628b 000d     .b...b...b...b..
   d73b8:	62b3 000d 62bb 000d 62c3 000d 62cb 000d     .b...b...b...b..

000d73c8 <_ZTVN5spark9WiFiClassE>:
	...
   d73d0:	6387 000d 637d 000d 6373 000d 6335 000d     .c..}c..sc..5c..
   d73e0:	5db1 000d 6367 000d 63e5 000d 63ed 000d     .]..gc...c...c..
   d73f0:	635b 000d 6353 000d 6349 000d 633f 000d     [c..Sc..Ic..?c..
   d7400:	641d 000d                                   .d..

000d7404 <_ZTVN5spark12NetworkClassE>:
	...
   d740c:	63a5 000d 63af 000d 63b9 000d 63c3 000d     .c...c...c...c..
   d741c:	63cd 000d 63d9 000d 63e5 000d 63ed 000d     .c...c...c...c..
   d742c:	63f5 000d 6401 000d 6409 000d 6413 000d     .c...d...d...d..
   d743c:	641d 000d                                   .d..

000d7440 <_ZSt7nothrow>:
	...

000d7441 <link_const_variable_data_end>:
   d7441:	00          	.byte	0x00
	...

000d7444 <link_constructors_location>:
   d7444:	000d4231 	.word	0x000d4231
   d7448:	000d5a91 	.word	0x000d5a91
   d744c:	000d5c01 	.word	0x000d5c01
   d7450:	000d5c61 	.word	0x000d5c61
   d7454:	000d5dbd 	.word	0x000d5dbd
   d7458:	000d5dcd 	.word	0x000d5dcd
   d745c:	000d5df5 	.word	0x000d5df5
   d7460:	000d6391 	.word	0x000d6391
   d7464:	000d64fd 	.word	0x000d64fd

000d7468 <link_constructors_end>:
	...
